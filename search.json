[{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Method of Matching taxonomic records","text":"BGSmartR use opinionated method match taxonomic records Plants World Online (Link), IUCN Red List (Link) BGCI. method automatic require manual alterations. Moreover, rather rely “fuzzy” matching difficult cases criteria used find best possible match. detail method works.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Method of Matching taxonomic records","text":"Records collection matched via taxonomic name taxonomic author/s (provided). frustration taxonomic data often taxonomic name frequently unique - example Abies taxifolia. often compounded collections storing taxonomic author, resulting multiple matches. Moreover, since collections data often converted old paper records strong chance mistakes typos taxonomic name. example hybridization marker might missed wrong infraspecific group used. Hence, method attempts automatically fix common issues. Matches taxonomic records found processing taxonomic name taxonomic author/s matching ‘pipeline’. pipeline summarized flow chart .  taxonomic record matched flowing pipeline shown. purple state indicated start algorithm. blue states correspond obtaining match (match), yellow process steps green decisions made algorithm. match collections data POWO (IUCN + BGCI) algorithm wrapped function enrich_report(), can used match enrich collection without concerning method applied. See vignette XX see function action. delve details step algorithm.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"algorithm","dir":"Articles","previous_headings":"","what":"Algorithm","title":"Method of Matching taxonomic records","text":"matching can occur require local version WCVP information matched . can created using import_wcvp_names() function BGSmartR. takes version wcvp POWO “enhances” include extra information used matching algorithm. document outlines method used match taxonomic plant names Plants World Online (POWO) using BGSmartR. automatic process requires list plant names (authors), shall refer original report. matching algorithm can split following steps (number corresponds flowchart): <1> Sanitise taxon names <2> Remove cultivars indeterminantes <3> Match taxon names unique taxon names POWO <4> Match non-unique taxon names POWO <5> Check author mismatching <6> Try fix taxon Removing autonym Adding hybridisation Adding/changing infrageneric level <7> Try find typo Update matches accepted names Set remaining POWO algorithm runs steps EXACT order. step matching occurs (2,3,5,6,7,8,9,10) list names match reduced names found. words, match found single taxon name steps taken. example, found adding hybridisation leads match POWO search typos later inputted taxon name. practice algorithm run single step using function match_original_to_wcvp(). now outline step algorithm.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"sanitise-taxon-names","dir":"Articles","previous_headings":"Algorithm","what":"1) Sanitise taxon names","title":"Method of Matching taxonomic records","text":"step used standardise format taxon name original report. standard format implement every character lower case except first letter Genus. standardise hybrid sign × rather x X (rare case h H). also ensure infrageneric level format f., var., subsp. nothosubsp.. Note sanitisation also performed POWO function import_wcvp_names(). performed taxon names remain matched. done using function sanitise_name() takes single taxon name input. outline examples using sanitise_name().","code":"sanitise_name('TRIGONELLA smyrnaea') #> [1] \"Trigonella smyrnaea\" sanitise_name('Halimium X pauanum') #> [1] \"Halimium × pauanum\" sanitise_name('Aruncus dioicus var acuminatus') #> [1] \"Aruncus dioicus var. acuminatus\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"remove-cultivars-and-indeterminantes","dir":"Articles","previous_headings":"Algorithm","what":"2) Remove cultivars and indeterminantes","title":"Method of Matching taxonomic records","text":"step sets match -1 taxon names know appear POWO. includes cultivars indeterminants. find taxon names pattern matching particular check following patterns. Includes sp.. Includes gx. Includes gx. Includes 'XX' text XX. common notation cultivars. Includes [. Begins Indet. Ends indet. Includes CV. Ends cv. Includes cv.. Includes Group. Includes unkn. Ends hybrid. Includes Hybrid. Includes Unknown. performed using function known_not_in_wcvp(), returns index taxon name contains patterns. taxon names set output message (POWO <known POWO>). provide example known_not_in_wcvp(). see function returns indices (starting 1) taxon names contains patterns outlined . ***","code":"taxon_names = c('Acalypha fruticulosa', 'Asclepias sp.', \"Abies umbilicata 'Some Cultivar'\",                  'Ammi copticum cv.') known_not_in_wcvp(taxon_names) #> $match #> [1] NA -1 -1 -1 #>  #> $message #> [1] \"\"                                            #> [2] \" -> (Not in POWO <known not to be in POWO>)\" #> [3] \" -> (Not in POWO <known not to be in POWO>)\" #> [4] \" -> (Not in POWO <known not to be in POWO>)\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"match-taxon-names-to-unique-taxon-names-in-powo","dir":"Articles","previous_headings":"Algorithm","what":"3) Match taxon names to unique taxon names in POWO","title":"Method of Matching taxonomic records","text":"step matches taxon names original report records POWO unique taxon name. mean taxon name exists single plant POWO multiple plants different authors sharing taxonomic name. name unique matching criteria required (e.g authors). step performed using function match_single_wcvp(). outline example function action: see match list contains: $match corresponding row wcvp$wcvp_names, match return NA. $message informs match obtained, match message set ''. find match also provide powo_id (e.g. 108437-3) can used search plant directly POWO’s website.","code":"# Choose some taxon names taxon_names = c(\"Amaranthus graecizans subsp. silvestris\", \"Amsonia ciliata\", \"Aristolochia islandica\", \"Adenocalymma scabriusculum\", \"Fake name\")  # Choose the indices of wcvp which correspond to a unique taxon name using `single_entry`. wcvp_search_index_single = which(wcvp$wcvp_names$single_entry == T)  # Perform the match match = match_single_wcvp(taxon_names = taxon_names, wcvp = wcvp, wcvp_search_index = wcvp_search_index_single) match #> $match #> [1]  1  2  3  4 NA #>  #> $message #> [1] \" -> (matches POWO record with single entry) -> (108437-3, Amaranthus graecizans subsp. silvestris)\" #> [2] \" -> (matches POWO record with single entry) -> (76904-1, Amsonia ciliata)\"                          #> [3] \" -> (matches POWO record with single entry) -> (19504-2, Aristolochia islandica)\"                   #> [4] \" -> (matches POWO record with single entry) -> (108156-1, Adenocalymma scabriusculum)\"              #> [5] \"\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"match-to-non-unique-taxon-names-in-powo","dir":"Articles","previous_headings":"Algorithm","what":"4) Match to non-unique taxon names in POWO","title":"Method of Matching taxonomic records","text":"step searches matches POWO taxon name multiple entries POWO. example suppose database contains taxon name 'Abies taxifolia'. Searching POWO find 6 records taxon name. taxon name author, taxon status accepted plant name. quantities can used decide record match .","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"matching-criteria-","dir":"Articles","previous_headings":"","what":"Method of Matching taxonomic records","title":"Method of Matching taxonomic records","text":"can split two parts author matching choosing records. begin choosing records, performed function match_taxon_status(). algorithm follows: single record, return record. plants accepted plant, return record accepted, otherwise return first record. exactly one record Accepted status return . none accepted status exactly one Synonym status, return . multiple accepted multiple synonym status return NA message multiple best taxon status, match. none accepted synonyms return NA message accepted synonym. Author matching attempted 4 ways, illustrated first author POWO second current plants. EXACT author matching. POWO = Sobol. ex Rupr., current = Sobol. ex Rupr.. POWO’s author contained current plant’s author. POWO = Sobol., current = Sobol. ex Rupr.. current plant’s author contained POWO’s author. POWO = Sobol. ex Rupr., current = Sobol.. Split POWO’s author words explore word contained current plant’s author. POWO = J.Lee ex Steud. current = James Lee. step match found stop try author matching. Note author matching (especially partial author matching) may lead multiple potential authors. Therefore, trying step author matching run match_taxon_status(). combination author matching taxon matching performed function get_match_from_multiple() single taxon name author combination. author match multiple records use function match_mult_wcvp() depends get_match_from_multiple(). example author matching provided ","code":"taxon_names = c('Abies taxifolia', 'Abies taxifolia', 'Abies taxifolia', 'Abies taxifolia', 'fake name') taxon_authors = c('Poir.', '', 'Desf. and Raf.', 'Desf. and Poir.',  'Dave')  match_mult_wcvp(taxon_names, taxon_authors, wcvp, wcvp$wcvp_names$single_entry == F, show_progress = F) #> $match #> [1]  8 -2  5  5 NA #>  #> $message #> [1] \" -> (Multiple records in POWO) ->(Partial author) -> (single match) -> (676620-1, Abies taxifolia)\"                        #> [2] \" -> (Multiple records in POWO) ->(No authors) -> ( > 1 match, multiple best taxon status, do not match)\"                   #> [3] \" -> (Multiple records in POWO) ->(Partial author) -> (single match) -> (261644-1, Abies taxifolia)\"                        #> [4] \" -> (Multiple records in POWO) ->(Partial author) -> ( > 1 match, choose via taxon_status) -> (261644-1, Abies taxifolia)\" #> [5] \"\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"check-original-author-names-compared-to-matched-authors","dir":"Articles","previous_headings":"Algorithm","what":"5) Check original author names compared to matched authors","title":"Method of Matching taxonomic records","text":"step used compare author names original report matched record POWO. authors judged one 3 categories: Exact match, authors identical. Partial match, authors split words least one word contained (.e word original author matched author, vice versa). Different, authors categories. extract words author name use function author_words(). extracts words start capital letter least length 3 (including hyphens), together DC., Sm. Br.. provide example comparison authors performed function author_check() given original author matched author returns one three messages outlined . example matching also returns ‘match’ names authors prior converting accepted names.","code":"author_words('Nakai & Tuyama') #> [1] \"Nakai\"  \"Tuyama\" author_words('J.C.Wendl. ex Hornem.') #> [1] \"Wendl\"  \"Hornem\" author_check('Oliv.','Oliv.') #> [1] \"Identical\" author_check('(Bong.) D.Don (Piper) C.L.Hitche','(Piper) C.H.Hitchc.') #> [1] \"Partial\" author_check('L.','(W.D.J.Koch) Arcang.') #> [1] \"Different\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"try-and-fix-the-taxon","dir":"Articles","previous_headings":"Algorithm","what":"6) Try and fix the taxon","title":"Method of Matching taxonomic records","text":"step tries 3 methods try fix taxon get match","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"a-try-removing-autonym","dir":"Articles","previous_headings":"Algorithm > 6) Try and fix the taxon","what":"A) Try removing autonym","title":"Method of Matching taxonomic records","text":"step tries match taxon names autonym removed. example suppose 'Acmena hemilampra subsp. hemilampra' original report. exist POWO. remove autonym might able match record POWO. Therefore want try 1 ‘potential’ taxon name: ‘potential’ taxon name matched POWO using steps (5) (6), match unique non-unique taxon names respectively. single match found return . contained function match_rm_autonym(), takes input taxon names, taxon names author POWO information returns matches. shown example. see find match potential taxon name return index match, message informing removed autonym. Potential names find match taxon names autonyms match equal NA message.","code":"#> [1] \"Acmena hemilampra\" # Choose some taxon names taxon_names = c('Acmena hemilampra subsp. hemilampra', 'Aesculus rubicunda',                 'Acacia fake var. fake')  # Perform the match match = match_rm_autonym(taxon_names = taxon_names, taxon_authors = taxon_names, wcvp = wcvp) match #> $match #> [1] 11 NA NA #>  #> $message #> [1] \" -> (Remove autonym) -> Acmena hemilampra -> (matches POWO record with single entry) -> (590531-1, Acmena hemilampra)\" #> [2] \"\"                                                                                                                      #> [3] \"\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"b-try-adding-hybridisation","dir":"Articles","previous_headings":"Algorithm > 6) Try and fix the taxon","what":"B) Try adding hybridisation","title":"Method of Matching taxonomic records","text":"step checks whether adding removing hybrid markers yields match. particular, step consider three cases:","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"single-words","dir":"Articles","previous_headings":"","what":"Method of Matching taxonomic records","title":"Method of Matching taxonomic records","text":"example suppose 'Asplenosorus' original report. exist POWO. Maybe missing hybrid start, either × +. Therefore want try 2 ‘potential’ taxon names:","code":"#> [1] \"+ Asplenosorus\" \"× Asplenosorus\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"taxon-names-with-no-hybrid-and-contains-234-words-","dir":"Articles","previous_headings":"","what":"Method of Matching taxonomic records","title":"Method of Matching taxonomic records","text":"example suppose 'Aesculus rubicunda var. whitleyi' original report. exist POWO. Maybe missing hybrid start first word. hybrid symbol either × +. Therefore want try 4 ‘potential’ taxon names:","code":"#> [1] \"× Aesculus rubicunda var. whitleyi\" \"+ Aesculus rubicunda var. whitleyi\" #> [3] \"Aesculus × rubicunda var. whitleyi\" \"Aesculus + rubicunda var. whitleyi\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"taxon-names-that-contain-exactly-one-or--","dir":"Articles","previous_headings":"","what":"Method of Matching taxonomic records","title":"Method of Matching taxonomic records","text":"example suppose 'Artemisia + pfaffii' original report. exist POWO. Maybe hybrid symbol wrong (×) perhaps hybrid symbol . Therefore want try 2 ‘potential’ taxon names: three cases match ‘potential’ taxon names POWO using steps (5) (6), match unique non-unique taxon names respectively. single match found return . multiple potential matches found change output message informing user multiple matches found names case, match found. contained function match_hybrid_issue(), takes input taxon names, taxon names author POWO information returns matches. shown example. see find single match potential taxon names index match returned. multiple potential names find matches match index set -5 message informs potential taxon names lead matches (shown example cases exist first letter , example see Try adding/changing infrageneric level). find matches potential names index set NA message left blank.","code":"#> [1] \"Artemisia pfaffii\"   \"Artemisia × pfaffii\" # Choose some taxon names taxon_names = c('Asplenosorus', 'Aesculus rubicunda var. whitleyi',                 'Artemisia + pfaffii', 'Acacia fake name')  # Perform the match match = match_hybrid_issue(taxon_names = taxon_names, taxon_authors = taxon_names, wcvp = wcvp) match #> $match #> [1] 12 13 14 NA #>  #> $message #> [1] \" -> (Hybrid fix) -> × Asplenosorus -> (matches POWO record with single entry) -> (17372380-1, × Asplenosorus)\"                                         #> [2] \" -> (Hybrid fix) -> Aesculus × rubicunda var. whitleyi -> (matches POWO record with single entry) -> (60453294-2, Aesculus × rubicunda var. whitleyi)\" #> [3] \" -> (Hybrid fix) -> Artemisia × pfaffii -> (matches POWO record with single entry) -> (179958-1, Artemisia × pfaffii)\"                                 #> [4] \"\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"c-try-addingchanging-infrageneric-level","dir":"Articles","previous_headings":"Algorithm > 6) Try and fix the taxon","what":"C) Try adding/changing infrageneric level","title":"Method of Matching taxonomic records","text":"step checks whether adding updating infrageneric level information yields match. particular, step consider three cases:","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"adding-infrageneric-level-and-hybrid-to-taxon-names-with-three-words-","dir":"Articles","previous_headings":"","what":"Method of Matching taxonomic records","title":"Method of Matching taxonomic records","text":"example suppose 'Amorphophallus calabaricus mayoi' original report. see three words potentially missed adding infrageneric level taxon name. either: subsp., var., f. nothosubsp.. Moreover, since missed infrageneric level might also missed hybridisation. also want check need add × taxon name. Therefore, want try 8 ‘potential’ taxon names:","code":"#> [1] \"Amorphophallus calabaricus subsp. mayoi\"        #> [2] \"Amorphophallus calabaricus var. mayoi\"          #> [3] \"Amorphophallus calabaricus f. mayoi\"            #> [4] \"Amorphophallus calabaricus nothosubsp. mayoi\"   #> [5] \"Amorphophallus × calabaricus subsp. mayoi\"      #> [6] \"Amorphophallus × calabaricus var. mayoi\"        #> [7] \"Amorphophallus × calabaricus f. mayoi\"          #> [8] \"Amorphophallus × calabaricus nothosubsp. mayoi\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"adding-infrageneric-level-to-taxon-names-with-four-words-that-contain-hybrid-","dir":"Articles","previous_headings":"","what":"Method of Matching taxonomic records","title":"Method of Matching taxonomic records","text":"example suppose 'Potamogeton × spathulatus svecicusi' original report. see four words including hybrid. Thus might potentially missed adding infrageneric level third word taxon name. either: subsp., var., f. nothosubsp.. Therefore, want try 4 ‘potential’ taxon names:","code":"#> [1] \"Asplenium × corbariense subsp. andorranum\"      #> [2] \"Asplenium × corbariense var. andorranum\"        #> [3] \"Asplenium × corbariense f. andorranum\"          #> [4] \"Asplenium × corbariense nothosubsp. andorranum\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"changing-the-infrageneric-level-","dir":"Articles","previous_headings":"","what":"Method of Matching taxonomic records","title":"Method of Matching taxonomic records","text":"example suppose 'Ajuga chamaepitys f. media' original report. taxonomic names match record POWO. Thus infrageneric level wrong. either: subsp., var. nothosubsp.. Therefore, want try 3 ‘potential’ taxon names: three cases match ‘potential’ taxon names POWO using steps (5) (6), match unique non-unique taxon names respectively. single match found return . multiple potential matches found change output message informing user multiple matches found names case, match found. contained function add_splitter(), takes input taxon names, taxon names author POWO information returns matches. shown example. see find single match potential taxon names index match returned. multiple potential names find matches match index set -5 message informs potential taxon names lead matches. find matches potential names index set NA message left blank.","code":"#> [1] \"Atriplex glabriuscula var. franktonii\"        #> [2] \"Atriplex glabriuscula subsp. franktonii\"      #> [3] \"Atriplex glabriuscula nothosubsp. franktonii\" # Choose some taxon names taxon_names = c('Atractylis carduus glabrescens', 'Asplenium × corbariense andorranum',                 'Atriplex glabriuscula f. franktonii', 'Acacia tortilis raddiana', 'Acacia fake name')  # Perform the match match = add_splitter(taxon_names = taxon_names, taxon_authors = taxon_names, wcvp = wcvp) match #> $match #> [1] 15 16 17 NA NA #>  #> $message #> [1] \" -> (Infrageneric level update) -> Atractylis carduus var. glabrescens -> (Multiple records in POWO) ->(No authors match) -> (single match) -> (876626-1, Atractylis carduus var. glabrescens)\" #> [2] \" -> (Infrageneric level update) -> Asplenium × corbariense subsp. andorranum -> (matches POWO record with single entry) -> (17572210-1, Asplenium × corbariense subsp. andorranum)\"             #> [3] \" -> (Infrageneric level update) -> Atriplex glabriuscula var. franktonii -> (matches POWO record with single entry) -> (1083622-2, Atriplex glabriuscula var. franktonii)\"                      #> [4] \"\"                                                                                                                                                                                               #> [5] \"\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"try-find-typo","dir":"Articles","previous_headings":"Algorithm","what":"7) Try find typo","title":"Method of Matching taxonomic records","text":"stage searches typos taxon name. Typos found three ways:","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"searching-a-data-frame-of-original-names-and-fixed-names-","dir":"Articles","previous_headings":"","what":"Method of Matching taxonomic records","title":"Method of Matching taxonomic records","text":"package include data frame typos can found BGSmartR::typo_list. contains 9,782 typos found garden databases. first find typos checking BGSmartR::typo_list.","code":"head(BGSmartR::typo_list) #>                 original                 fixed #> 2       Acacia macrantha      Acacia micrantha #> 3 Acoelorrhaphe wrightii Acoelorraphe wrightii #> 4      Agave desmettiana      Agave desmetiana #> 6      Agave lecheguilla     Agave lechuguilla #> 7          Agave werklei        Agave wercklei #> 8    Aleurites moluccana  Aleurites moluccanus"},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"searching-for-common-issues-found-in-taxon-names-","dir":"Articles","previous_headings":"","what":"Method of Matching taxonomic records","title":"Method of Matching taxonomic records","text":"found match typo list check common issues found taxon names. includes changing end taxon name. particular check following endings replacements. ‘’ <-> ‘ii’ ‘’ <-> ‘ae’ ‘’ <-> ‘um’ ‘’ <-> ‘us’ ‘ae’ <-> ‘eae’ ‘e’ <-> ‘’ ‘’ <->‘e’ ‘us’ <-> ‘’ ‘ense’ <->‘iense’ ‘oides’ <-> ‘ioides’ ‘orum’ <-> ‘iorum’ also check following patterns anywhere taxon name: ‘’ <-> ‘ae’","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"searching-for-a-single-change-in-letter-","dir":"Articles","previous_headings":"","what":"Method of Matching taxonomic records","title":"Method of Matching taxonomic records","text":"final stage performs larger check change single character. involves: Checking removing single character taxon name positions. Checking adding single character (-z ‘-’) positions. Changing current letter character -z positions. check whether typo exists can use function check_taxon_typo(), checks potential fixes names POWO. check typos match records POWO use function match_typo(). example outlined .","code":"# Choose some taxon names taxon_names = c('Acalypha stellipilus', 'Aiphanes lucana',                 'Acer × pseudocreticums', 'Amaranthus paraguay-ensis', 'Acacia fake name')  # Perform the match match = match_typos(taxon_names = taxon_names, taxon_authors = taxon_names, wcvp = wcvp, typo_method = 'full') match #> $match #> [1] 18 19 20 21 NA #>  #> $message #> [1] \" -> (Typo) -> Acalypha stellipila -> (matches POWO record with single entry) -> (1526-2, Acalypha stellipila)\"            #> [2] \" -> (Typo) -> Aiphanes luciana -> (matches POWO record with single entry) -> (7915-2, Aiphanes luciana)\"                  #> [3] \" -> (Typo) -> Acer × pseudocreticum -> (matches POWO record with single entry) -> (56786-1, Acer × pseudocreticum)\"       #> [4] \" -> (Typo) -> Amaranthus paraguayensis -> (matches POWO record with single entry) -> (59611-1, Amaranthus paraguayensis)\" #> [5] \"\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"update-matches-to-accepted-names","dir":"Articles","previous_headings":"Algorithm","what":"12) Update matches to accepted names","title":"Method of Matching taxonomic records","text":"update taxon names accepted form use field accepted_plant_name_id POWO. accepted_plant_name_id match plant_name_id update match correspond accepted plant. performed function convert_to_accepted_name() BGSmartR, takes current state matches updates accepted form. example given . see first two taxon names go accepted form third . shown $match remaining empty $message running convert_to_accepted_name(). can check accepted name using codes provided message POWO’s website. done changing last part URL. example Adina nobilis can found address https://powo.science.kew.org/taxon/urn:lsid:ipni.org:names:742921-1. see indeed synonym Adina racemosa.","code":"taxon_names = c('Adina nobilis', 'Acalypha gracilens var. fraseri',                  'Andira zehntneri') match = match_single_wcvp(taxon_names,wcvp,wcvp_search_index_single) match #> $match #> [1] 22 23 24 #>  #> $message #> [1] \" -> (matches POWO record with single entry) -> (742921-1, Adina nobilis)\"                 #> [2] \" -> (matches POWO record with single entry) -> (1280-2, Acalypha gracilens var. fraseri)\" #> [3] \" -> (matches POWO record with single entry) -> (12614-2, Andira zehntneri)\" new_match = convert_to_accepted_name(match$match, wcvp) new_match #> $match #> [1] 25 26 24 #>  #> $message #> [1] \" -> (Go to accepted name) -> (742931-1, Adina racemosa)\"   #> [2] \" -> (Go to accepted name) -> (1278-2, Acalypha gracilens)\" #> [3] \"\"  #Putting the messages together. messages = paste0(match$message, new_match$message) messages #> [1] \" -> (matches POWO record with single entry) -> (742921-1, Adina nobilis) -> (Go to accepted name) -> (742931-1, Adina racemosa)\"                   #> [2] \" -> (matches POWO record with single entry) -> (1280-2, Acalypha gracilens var. fraseri) -> (Go to accepted name) -> (1278-2, Acalypha gracilens)\" #> [3] \" -> (matches POWO record with single entry) -> (12614-2, Andira zehntneri)\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"set-remaining-to-not-in-powo","dir":"Articles","previous_headings":"Algorithm","what":"13) Set remaining to not in POWO","title":"Method of Matching taxonomic records","text":"set match index -3 remaining taxon names. messages add (POWO).","code":""},{"path":"https://jakepowellcubg.github.io/BGR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jake Powell. Author, maintainer.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Powell J (2023). BGSmartR: Analyse Botanic Garden collections. R package version 0.0.0.9000, https://jakepowellcubg.github.io/BGR/.","code":"@Manual{,   title = {BGSmartR: Analyse Botanic Garden collections},   author = {Jake Powell},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://jakepowellcubg.github.io/BGR/}, }"},{"path":"https://jakepowellcubg.github.io/BGR/index.html","id":"id_-bgr","dir":"","previous_headings":"","what":"# BGR","title":"Analyse Botanic Garden collections","text":"📦 BGR package used enriching living collections records creating report analysis’ collections.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyse Botanic Garden collections","text":"can install BGR calling following command:","code":"devtools::install_github(\"JakePowellCUBG/BGR\", dependencies = TRUE) #for development version"},{"path":"https://jakepowellcubg.github.io/BGR/reference/BGSmartR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"BGSmartR: Analyse Botanic Garden collections — BGSmartR-package","title":"BGSmartR: Analyse Botanic Garden collections — BGSmartR-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://jakepowellcubg.github.io/BGR/reference/BGSmartR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"BGSmartR: Analyse Botanic Garden collections — BGSmartR-package","text":"Maintainer: Jake Powell jjp68@cam.ac.uk (ORCID)","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Add transparency to colours — add_alpha","title":"Add transparency to colours — add_alpha","text":"Add transparency colours","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add transparency to colours — add_alpha","text":"","code":"add_alpha(col, alpha = 1)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_alpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add transparency to colours — add_alpha","text":"col vector colours alpha transparency wanted","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_alpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add transparency to colours — add_alpha","text":"vector colours added transparency","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_infrageneric_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Add infrageneric_level column to Botanic garden database. — add_infrageneric_level","title":"Add infrageneric_level column to Botanic garden database. — add_infrageneric_level","text":"Add infrageneric_level column Botanic garden database.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_infrageneric_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add infrageneric_level column to Botanic garden database. — add_infrageneric_level","text":"","code":"add_infrageneric_level(   data,   TaxonNameColumn = \"TaxonName\",   POWO_TaxonNameColumn = NULL,   progress_bar = FALSE )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_infrageneric_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add infrageneric_level column to Botanic garden database. — add_infrageneric_level","text":"data BG database TaxonNameColumn name column containing (original) Taxon name. POWO_TaxonNameColumn name column containing POWO (WCVP) Taxon name. progress_bar Logical flag, TRUE show progress bar, else progress bar","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_infrageneric_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add infrageneric_level column to Botanic garden database. — add_infrageneric_level","text":"BG database new column called infrageneric_level","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_is_autonym.html","id":null,"dir":"Reference","previous_headings":"","what":"Add is_autonym column to Botanic garden database. — add_is_autonym","title":"Add is_autonym column to Botanic garden database. — add_is_autonym","text":"Add is_autonym column Botanic garden database.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_is_autonym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add is_autonym column to Botanic garden database. — add_is_autonym","text":"","code":"add_is_autonym(data, TaxonName_column = \"TaxonName\", progress_bar = FALSE)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_is_autonym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add is_autonym column to Botanic garden database. — add_is_autonym","text":"data BG database TaxonName_column name column containing Taxon name. progress_bar Logical flag, TRUE show progress bar, else progress bar","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_is_autonym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add is_autonym column to Botanic garden database. — add_is_autonym","text":"BG database new column called is_autonym flags Taxon name autonym","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_splitter.html","id":null,"dir":"Reference","previous_headings":"","what":"add_splitter() — add_splitter","title":"add_splitter() — add_splitter","text":"add_splitter()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_splitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_splitter() — add_splitter","text":"","code":"add_splitter(taxon_names, taxon_authors, wcvp)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_splitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_splitter() — add_splitter","text":"taxon_names taxon names taxon_authors taxon names author wcvp enrich information","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_splitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_splitter() — add_splitter","text":"list match message","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_status_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Add status_year column to Botanic garden database. — add_status_year","title":"Add status_year column to Botanic garden database. — add_status_year","text":"Add status_year column Botanic garden database.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_status_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add status_year column to Botanic garden database. — add_status_year","text":"","code":"add_status_year(data, ItemStatusDate_column = \"ItemStatusDate\")"},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_status_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add status_year column to Botanic garden database. — add_status_year","text":"data BG database ItemStatusDate_column name column containing Taxon name.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_status_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add status_year column to Botanic garden database. — add_status_year","text":"BG database new column called status_year.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_wcvp_distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add wcvp_distributions information to wcvp_names — add_wcvp_distributions","title":"Add wcvp_distributions information to wcvp_names — add_wcvp_distributions","text":"allow three methods uploading information wcvp_distributions: choosing file path csv file containing information using filepath. loading R save (file type .RData, .rdata, .rda .rds) via filepath. using package  rWCVPData, setting use_rWCVPData = TRUE.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_wcvp_distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add wcvp_distributions information to wcvp_names — add_wcvp_distributions","text":"","code":"add_wcvp_distributions(filepath, wcvp, use_rWCVPdata = FALSE)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_wcvp_distributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add wcvp_distributions information to wcvp_names — add_wcvp_distributions","text":"filepath path wcvp_distributions.csv file. wcvp Output import_wcvp_names use_rWCVPdata Flag whether use rWCVPdata get wcvp_distributions","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_wcvp_distributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add wcvp_distributions information to wcvp_names — add_wcvp_distributions","text":"Desired information wcvp_distributions.csv combined wcvp_names.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_check.html","id":null,"dir":"Reference","previous_headings":"","what":"author_check() — author_check","title":"author_check() — author_check","text":"author_check()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"author_check() — author_check","text":"","code":"author_check(original_author, proposed_author)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"author_check() — author_check","text":"original_author original_author proposed_author proposed_author","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"author_check() — author_check","text":"message author comparison","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_from_taxon_name_full.html","id":null,"dir":"Reference","previous_headings":"","what":"author_from_taxon_names_full() — author_from_taxon_name_full","title":"author_from_taxon_names_full() — author_from_taxon_name_full","text":"author_from_taxon_names_full()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_from_taxon_name_full.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"author_from_taxon_names_full() — author_from_taxon_name_full","text":"","code":"author_from_taxon_name_full(taxon_names, taxon_names_full)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_from_taxon_name_full.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"author_from_taxon_names_full() — author_from_taxon_name_full","text":"taxon_names taxon names taxon_names_full taxon names author","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_from_taxon_name_full.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"author_from_taxon_names_full() — author_from_taxon_name_full","text":"author","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_words.html","id":null,"dir":"Reference","previous_headings":"","what":"author_words() — author_words","title":"author_words() — author_words","text":"author_words()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_words.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"author_words() — author_words","text":"","code":"author_words(author)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_words.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"author_words() — author_words","text":"author Author wants splitting words.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_words.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"author_words() — author_words","text":"author words","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/check_taxon_typo.html","id":null,"dir":"Reference","previous_headings":"","what":"check_taxon_typo() — check_taxon_typo","title":"check_taxon_typo() — check_taxon_typo","text":"function checks typos taxon name returns (first) record found wcvp single change.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/check_taxon_typo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_taxon_typo() — check_taxon_typo","text":"","code":"check_taxon_typo(taxon, wcvp = NA, typo_df = BGSmartR::typo_list, fast = T)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/check_taxon_typo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_taxon_typo() — check_taxon_typo","text":"taxon taxon_name wcvp POWO database typo_df data frame two columns typos fixes. fast flag whether want search typo_df (TRUE) also search directly (FALSE)","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/check_taxon_typo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_taxon_typo() — check_taxon_typo","text":"potential fixed name, NA correction found.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/check_taxon_typo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"check_taxon_typo() — check_taxon_typo","text":"particular, function compares given taxon single extra letter, changing one letter removing one letter names known POWO.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/convert_to_accepted_name.html","id":null,"dir":"Reference","previous_headings":"","what":"convert_to_accepted_name() — convert_to_accepted_name","title":"convert_to_accepted_name() — convert_to_accepted_name","text":"function used update match POWO checking accepted plant names.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/convert_to_accepted_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert_to_accepted_name() — convert_to_accepted_name","text":"","code":"convert_to_accepted_name(original_match, wcvp)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/convert_to_accepted_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert_to_accepted_name() — convert_to_accepted_name","text":"original_match vector indices corresponding match gardens database POWO. wcvp cleaned POWO database","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/convert_to_accepted_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert_to_accepted_name() — convert_to_accepted_name","text":"list length two containing: $match index match taxon_names wcvp, match goes record accepted status. $message message detailing match.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_basic_stats_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_basic_stats_interactive() — create_basic_stats_interactive","title":"create_basic_stats_interactive() — create_basic_stats_interactive","text":"create_basic_stats_interactive()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_basic_stats_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_basic_stats_interactive() — create_basic_stats_interactive","text":"","code":"create_basic_stats_interactive(   enriched_report,   min_year = NULL,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_basic_stats_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_basic_stats_interactive() — create_basic_stats_interactive","text":"enriched_report enriched report min_year first year consider retrospective review. collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_basic_stats_static.html","id":null,"dir":"Reference","previous_headings":"","what":"create_basic_stats_static() — create_basic_stats_static","title":"create_basic_stats_static() — create_basic_stats_static","text":"create_basic_stats_static()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_basic_stats_static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_basic_stats_static() — create_basic_stats_static","text":"","code":"create_basic_stats_static(   enriched_report,   min_year = NULL,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_basic_stats_static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_basic_stats_static() — create_basic_stats_static","text":"enriched_report enriched report min_year first year consider retrospective review. collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_duplication_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_duplication_interactive() — create_duplication_interactive","title":"create_duplication_interactive() — create_duplication_interactive","text":"create_duplication_interactive()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_duplication_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_duplication_interactive() — create_duplication_interactive","text":"","code":"create_duplication_interactive(   enriched_report,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_duplication_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_duplication_interactive() — create_duplication_interactive","text":"enriched_report enriched report collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_key_taxa_compare_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_key_taxa_interactive() — create_key_taxa_compare_interactive","title":"create_key_taxa_interactive() — create_key_taxa_compare_interactive","text":"create_key_taxa_interactive()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_key_taxa_compare_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_key_taxa_interactive() — create_key_taxa_compare_interactive","text":"","code":"create_key_taxa_compare_interactive(   enriched_report,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_key_taxa_compare_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_key_taxa_interactive() — create_key_taxa_compare_interactive","text":"enriched_report enriched report collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_key_taxa_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_key_taxa_interactive() — create_key_taxa_interactive","title":"create_key_taxa_interactive() — create_key_taxa_interactive","text":"create_key_taxa_interactive()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_key_taxa_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_key_taxa_interactive() — create_key_taxa_interactive","text":"","code":"create_key_taxa_interactive(   enriched_report,   min_year = NULL,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_key_taxa_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_key_taxa_interactive() — create_key_taxa_interactive","text":"enriched_report enriched report min_year first year consider retrospective review. collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_last_update_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_last_update_interactive() — create_last_update_interactive","title":"create_last_update_interactive() — create_last_update_interactive","text":"create_last_update_interactive()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_last_update_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_last_update_interactive() — create_last_update_interactive","text":"","code":"create_last_update_interactive(   enriched_report,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_last_update_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_last_update_interactive() — create_last_update_interactive","text":"enriched_report enriched report collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_last_update_static.html","id":null,"dir":"Reference","previous_headings":"","what":"create_last_update_static() — create_last_update_static","title":"create_last_update_static() — create_last_update_static","text":"create_last_update_static()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_last_update_static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_last_update_static() — create_last_update_static","text":"","code":"create_last_update_static(   enriched_report,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_last_update_static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_last_update_static() — create_last_update_static","text":"enriched_report enriched report collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_retrospective_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_retrospective_interactive() — create_retrospective_interactive","title":"create_retrospective_interactive() — create_retrospective_interactive","text":"function can used create snapshot report living collection. report produces interactive graphs (bars, pies geography) distribution plants collection. includes native location plants collection proportion endemic threatened species collection.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_retrospective_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_retrospective_interactive() — create_retrospective_interactive","text":"","code":"create_retrospective_interactive(   enriched_report,   collection = NULL,   min_year = NULL,   collection_coords = NA,   save_widgets = FALSE,   create_excel = FALSE,   output_dir = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_retrospective_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_retrospective_interactive() — create_retrospective_interactive","text":"enriched_report enriched report collection name collection min_year earliest year want review collection_coords coordinates collection (long, lat) save_widgets Logical whether want create folder 'Widgets' containing widgets report. create_excel Logical whether want create excel file containing tables used create widgets report. output_dir Path output directory.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_snapshot_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_snapshot_interactive() — create_snapshot_interactive","title":"create_snapshot_interactive() — create_snapshot_interactive","text":"function can used create snapshot report living collection. report produces interactive graphs (bars, pies geography) distribution plants collection. includes native location plants collection proportion endemic threatened species collection.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_snapshot_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_snapshot_interactive() — create_snapshot_interactive","text":"","code":"create_snapshot_interactive(   enriched_report,   collection = NULL,   collection_coords = NA,   output_file = NULL,   save_widgets = FALSE,   create_excel = FALSE,   output_dir = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_snapshot_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_snapshot_interactive() — create_snapshot_interactive","text":"enriched_report enriched report collection name collection collection_coords coordinates collection (long, lat) output_file file path output save_widgets Logical whether want create folder 'Widgets' containing widgets report. create_excel Logical whether want create excel file containing tables used create widgets report. output_dir Path output directory.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_turnover_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_turnover_interactive() — create_turnover_interactive","title":"create_turnover_interactive() — create_turnover_interactive","text":"create_turnover_interactive()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_turnover_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_turnover_interactive() — create_turnover_interactive","text":"","code":"create_turnover_interactive(   enriched_report,   min_year = NULL,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_turnover_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_turnover_interactive() — create_turnover_interactive","text":"enriched_report enriched report min_year first year consider retrospective review. collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/enrich_report.html","id":null,"dir":"Reference","previous_headings":"","what":"enrich_original() — enrich_report","title":"enrich_original() — enrich_report","text":"function enriches original report adding columns:","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/enrich_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"enrich_original() — enrich_report","text":"","code":"enrich_report(   original_report,   wcvp = NA,   redList = NA,   BGCI = NA,   taxon_name_col = \"TaxonName\",   taxon_name_full_col = NA,   taxon_author_col = NA,   do_is_autonym = FALSE,   do_status_year = FALSE,   do_infrageneric_level = FALSE,   typo_method = \"fast\" )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/enrich_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"enrich_original() — enrich_report","text":"original_report gardens original report wcvp POWO database redList RedList database BGCI BGCI database taxon_name_col Column name original report taxon name taxon_name_full_col Column name original report taxon name author/s (combined) taxon_author_col Column name original report taxon author/s do_is_autonym Flag whether add column is_autonym do_status_year Flag whether add column status_year do_infrageneric_level Flag whether add column infrageneric_level typo_method Flag whether search typos","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/enrich_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"enrich_original() — enrich_report","text":"list length two: $enriched_report enriched report, match_details details taxon names used match POWO.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/enrich_report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"enrich_original() — enrich_report","text":"is_autonym (Logical (TRUE/FALSE)) detailing whether taxon name autonym. status_year (numeric) year extracted ItemStatusDate. infrageneric_level (character) infrageneric level taxon name. Uses taxon names retrieved POWO available. Information POWO.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/exist_at_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data frame of records that exist each year — exist_at_date","title":"Generate data frame of records that exist each year — exist_at_date","text":"function calculates items collection existing given date (dates).","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/exist_at_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data frame of records that exist each year — exist_at_date","text":"","code":"exist_at_date(date, AccessionYear, ItemStatusDate, ItemStatusType)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/exist_at_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data frame of records that exist each year — exist_at_date","text":"date dates format YYYY-MM-DD YYYY/MM/DD. AccessionYear accession year records. ItemStatusDate data records last updated. ItemStatusType status record last updated. Either Existing NotExisting.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/exist_at_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data frame of records that exist each year — exist_at_date","text":"data frame column corresponds date, row item collection. (,j)th value logical (TRUE/FALSE) corresponding whether ith item existed jth date.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/exist_at_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate data frame of records that exist each year — exist_at_date","text":"Accession date inputted AccessionYear accepts year, example c(2014,2017,2015). accession date set 1st January given year. Item death calculated via inputs ItemStatusDate ItemStatusType. item still alive (ItemStatusType == 'Existing) death date set today (Sys.Date()). Otherwise item dead (ItemStatusType == 'NotExisting) use corresponding date given ItemStatusDate. year available ItemStatusDate set date death 31st December year. month year available set day item death 28th. AccessionYear, ItemStatusDate ItemStatusType inputs must length ith value corresponds ith item collection.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/exist_at_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate data frame of records that exist each year — exist_at_date","text":"","code":"exist_at_date(date = c('2003-06-25', '2010-03-07'), AccessionYear = c('1956', '1988', '2005', '2018'), ItemStatusDate = c('2004-01', '2010-03-05', '2022-04-08', '2022-08-19'), ItemStatusType = c('NotExisting','NotExisting','Existing','Existing')) #>   2003-06-25 2010-03-07 #> 1       TRUE      FALSE #> 2       TRUE      FALSE #> 3      FALSE       TRUE #> 4      FALSE      FALSE"},{"path":"https://jakepowellcubg.github.io/BGR/reference/extract_year.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_year() — extract_year","title":"extract_year() — extract_year","text":"function extracts year dates date can formats : DD/MM/YYYY YYYY-MM-DD MM/YYYY YYYY-MM YYYY DD Month YYYY","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/extract_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_year() — extract_year","text":"","code":"extract_year(date_vector)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/extract_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_year() — extract_year","text":"date_vector vector dates","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/extract_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract_year() — extract_year","text":"vector years","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/extract_year.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"extract_year() — extract_year","text":"method works extracting patterns 4 numbers row. Thus, year must format YYYY. .e. formats DD/MM/YY.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/extract_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"extract_year() — extract_year","text":"","code":"extract_year('03/05/2023') #> [1] 2023 extract_year('3rd of May 2023') #> [1] 2023 extract_year('2023-05-03') #> [1] 2023"},{"path":"https://jakepowellcubg.github.io/BGR/reference/generate_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"generate_labels() — generate_labels","title":"generate_labels() — generate_labels","text":"Generate shortened distribution details can used labels collections.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/generate_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate_labels() — generate_labels","text":"","code":"generate_labels(data)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/generate_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate_labels() — generate_labels","text":"data distribution data plants taken wcvp_distribution.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/generate_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate_labels() — generate_labels","text":"labels","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_accepted_plant.html","id":null,"dir":"Reference","previous_headings":"","what":"Get accepted plant details from POWO online — get_accepted_plant","title":"Get accepted plant details from POWO online — get_accepted_plant","text":"function queries POWO online accepted name plant corresponding Plants World Online identifier.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_accepted_plant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get accepted plant details from POWO online — get_accepted_plant","text":"","code":"get_accepted_plant(powo_id)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_accepted_plant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get accepted plant details from POWO online — get_accepted_plant","text":"powo_id Plants World Online identifier","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_accepted_plant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get accepted plant details from POWO online — get_accepted_plant","text":"vector length two containing accepted name accepted powo_id.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_accepted_plant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get accepted plant details from POWO online — get_accepted_plant","text":"connection POWO work (exist) function returns (NA, NA).","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_accepted_plant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get accepted plant details from POWO online — get_accepted_plant","text":"","code":"get_accepted_plant('582307-1') #> [1] \"Campomanesia thea\" \"44106-2\""},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_match_from_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"get_match_from_multiple() — get_match_from_multiple","title":"get_match_from_multiple() — get_match_from_multiple","text":"Given taxon name full version find records POWO share taxon name. choose record match :","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_match_from_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_match_from_multiple() — get_match_from_multiple","text":"","code":"get_match_from_multiple(taxon_name_and_author, wcvp_mult)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_match_from_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_match_from_multiple() — get_match_from_multiple","text":"taxon_name_and_author pair taxon name taxon name full. wcvp_mult POWO database restricted records unique taxon name.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_match_from_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_match_from_multiple() — get_match_from_multiple","text":"list length two containing: $match index match taxon_names wcvp $message message detailing match.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/import_wcvp_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Information from wcvp_names — import_wcvp_names","title":"Information from wcvp_names — import_wcvp_names","text":"allow three methods uploading information wcvp_names: choosing file path csv file containing information using filepath. loading R save (file type .RData, .rdata, .rda .rds) via filepath. using package  rWCVPData, setting use_rWCVPData = TRUE.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/import_wcvp_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information from wcvp_names — import_wcvp_names","text":"","code":"import_wcvp_names(   filepath = NULL,   use_rWCVPdata = FALSE,   wanted_columns = c(\"plant_name_id\", \"taxon_rank\", \"taxon_status\", \"family\", \"genus\",     \"species\", \"lifeform_description\", \"climate_description\", \"taxon_name\",     \"taxon_authors\", \"accepted_plant_name_id\", \"powo_id\") )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/import_wcvp_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information from wcvp_names — import_wcvp_names","text":"filepath path wcvp_names.csv file. use_rWCVPdata Flag whether use rWCVPdata get wcvp_names wanted_columns specify extra columns extract wcvp_names.csv.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/import_wcvp_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information from wcvp_names — import_wcvp_names","text":"Data frame ddesired information wcvp_names","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/import_wcvp_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Information from wcvp_names — import_wcvp_names","text":"columns extracted always include:\"plant_name_id\", \"taxon_name\", \"taxon_authors\", \"taxon_rank\", \"accepted_plant_name_id\" \"powo_id\". columns can extracted using wanted_columns parameter, either columns names indices can used. add two new columns: 'taxon_length' contains number characters given taxon_name used searching typos garden databases. 'is_autonym' contains logical flag whether taxon name autonym. used match autonyms garden databases. Moreover, code performs fixes data provided namely: Checks '*' '**' taxon_name taxon_rank, 'var.' 'f.' instead. potentially plants synonyms without accepted form wcvp_names. However, cases accepted form can found POWO online. Therefore, case scrap POWO online accepted form add loaded information wcvp_names. author provided autonyms, extract corresponding author matching GenusSpecies record.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/infrageneric_level.html","id":null,"dir":"Reference","previous_headings":"","what":"infrageneric_level() — infrageneric_level","title":"infrageneric_level() — infrageneric_level","text":"functions extracts infrageneric level taxon name, particular:","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/infrageneric_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"infrageneric_level() — infrageneric_level","text":"","code":"infrageneric_level(taxonName)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/infrageneric_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"infrageneric_level() — infrageneric_level","text":"taxonName taxon name","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/infrageneric_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"infrageneric_level() — infrageneric_level","text":"infrageneric levels plant","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/infrageneric_level.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"infrageneric_level() — infrageneric_level","text":"0.indet: plant indeterminate. 1.species: plant species. 2.subsp: plant subspecies. 3.var: plant variety. 4.f: plant 5.cultivar: plant cultivar. 6.hybrid: plant hybrid. 0-4 biological characteristics plant can one characteristics. 5-6 horticultural characteristics plants can none, one .","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/infrageneric_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"infrageneric_level() — infrageneric_level","text":"","code":"# \\donttest{ # 0.indet infrageneric_level(\"\\xd7 Aridaria sp.\") #> Warning: unable to translate '<d7> Aridaria sp.' to a wide string #> Warning: input string 1 is invalid #> Warning: unable to translate '<d7> Aridaria sp.' to a wide string #> Warning: input string 1 is invalid #> Warning: unable to translate '<d7> Aridaria sp.' to a wide string #> Warning: input string 1 is invalid #> Warning: unable to translate '<d7> Aridaria sp.' to a wide string #> Warning: input string 1 is invalid #> Warning: unable to translate '<d7> Aridaria sp.' to a wide string #> Warning: input string 1 is invalid #> Warning: unable to translate '<d7> Aridaria sp.' to a wide string #> Warning: input string 1 is invalid #> [1] \"6.hybrid\"  # 1.species infrageneric_level(\"Saxegothaea conspicua\") #> [1] \"1.species\"  # 2.subsp infrageneric_level(\"Rhododendron charitopes subsp. tsangpoense\") #> [1] \"2.subsp\"  # 3.var infrageneric_level(\"Rhododendron saluenense var. prostratum\") #> [1] \"3.var\"  # 4.f infrageneric_level(\"Aquilegia flabellata f. alba\") #> [1] \"4.f\" # }"},{"path":"https://jakepowellcubg.github.io/BGR/reference/is_autonym.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a Taxon name is an autonym — is_autonym","title":"Find if a Taxon name is an autonym — is_autonym","text":"function calculates whether Taxon Name autonym.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/is_autonym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a Taxon name is an autonym — is_autonym","text":"","code":"is_autonym(name)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/is_autonym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a Taxon name is an autonym — is_autonym","text":"name Taxon name plant","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/is_autonym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a Taxon name is an autonym — is_autonym","text":"TRUE Taxon name autonym, otherwise FALSE.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/is_autonym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find if a Taxon name is an autonym — is_autonym","text":"","code":"# An autonym. is_autonym(\"Codiaeum variegatum var. variegatum\") #> [1] TRUE # Not an autonym. is_autonym(\"Crinum pedunculatum f. purple\") #> [1] FALSE"},{"path":"https://jakepowellcubg.github.io/BGR/reference/known_not_in_wcvp.html","id":null,"dir":"Reference","previous_headings":"","what":"known_not_in_wcvp() — known_not_in_wcvp","title":"known_not_in_wcvp() — known_not_in_wcvp","text":"function finds taxon names known POWO. particular includes: Includes  sp.. Includes gx. Includes  gx. Includes 'XX' text XX. common notation XX. Includes [. Begins Indet. indetminant therefore POWO. Ends indet. indetminant therefore POWO. Includes CV. Ends cv. Includes cv.. Includes Group. Includes unkn. Ends hybrid. Includes Hybrid . Includes Unknown.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/known_not_in_wcvp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"known_not_in_wcvp() — known_not_in_wcvp","text":"","code":"known_not_in_wcvp(taxon_names)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/known_not_in_wcvp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"known_not_in_wcvp() — known_not_in_wcvp","text":"taxon_names vector taxon names","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/known_not_in_wcvp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"known_not_in_wcvp() — known_not_in_wcvp","text":"vector indices taxon_names can removed.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/known_not_in_wcvp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"known_not_in_wcvp() — known_not_in_wcvp","text":"Note known POWO exceptions captured reading data via input_wcvp_names().","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_all_issue.html","id":null,"dir":"Reference","previous_headings":"","what":"match_all_issue() — match_all_issue","title":"match_all_issue() — match_all_issue","text":"match_all_issue()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_all_issue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"match_all_issue() — match_all_issue","text":"","code":"match_all_issue(   taxon_names,   taxon_authors,   do_taxon_author,   wcvp,   single_indices = NA,   mult_indices = NA )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_all_issue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"match_all_issue() — match_all_issue","text":"taxon_names taxon_names taxon_authors taxon_authors do_taxon_author do_taxon_author wcvp wcvp single_indices single_indices mult_indices mult_indices","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_all_issue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"match_all_issue() — match_all_issue","text":"return","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_error.html","id":null,"dir":"Reference","previous_headings":"","what":"match_error() — match_error","title":"match_error() — match_error","text":"match_error()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"match_error() — match_error","text":"","code":"match_error(   new_taxon_names,   match_details,   original_author,   wcvp,   current_message = \"\" )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"match_error() — match_error","text":"new_taxon_names new_taxon_names match_details match_details original_author original_author wcvp wcvp current_message current_message","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"match_error() — match_error","text":"list message match","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_hybrid_issue.html","id":null,"dir":"Reference","previous_headings":"","what":"match_hybrid_issue — match_hybrid_issue","title":"match_hybrid_issue — match_hybrid_issue","text":"match_hybrid_issue","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_hybrid_issue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"match_hybrid_issue — match_hybrid_issue","text":"","code":"match_hybrid_issue(taxon_names, taxon_authors, wcvp)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_hybrid_issue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"match_hybrid_issue — match_hybrid_issue","text":"taxon_names taxon names taxon_authors taxon names author wcvp enrich information","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_hybrid_issue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"match_hybrid_issue — match_hybrid_issue","text":"list match message","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_mult_wcvp.html","id":null,"dir":"Reference","previous_headings":"","what":"match_mult_wcvp() — match_mult_wcvp","title":"match_mult_wcvp() — match_mult_wcvp","text":"Given taxon names taxon authors want match (taxon_names, taxon_authors), cleaned version plants world online ( wcvp imported function import_wcvp_names()) indices wcvp  records want math (wcvp_search_index). function designed match records share taxon names user restrict search indices non-unique taxon names subset names.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_mult_wcvp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"match_mult_wcvp() — match_mult_wcvp","text":"","code":"match_mult_wcvp(   taxon_names,   taxon_authors,   wcvp,   wcvp_search_index,   show_progress = TRUE )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_mult_wcvp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"match_mult_wcvp() — match_mult_wcvp","text":"taxon_names vector taxon names taxon_authors vector full taxon names (corresponding taxon_names) wcvp cleaned POWO database wcvp_search_index Indices wcvp want search match show_progress Flag whether show progress bar.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_mult_wcvp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"match_mult_wcvp() — match_mult_wcvp","text":"list length two containing: $match index match taxon_names wcvp $message message detailing match.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_mult_wcvp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"match_mult_wcvp() — match_mult_wcvp","text":"matching individual taxon names completed get_match_from_multiple(). matched index corresponds full wcvp data set. match found ascertain record match POWO set match index -2. taxon name found POWO function returns NA. Moreover, function creates message taxon name detailing match found powo identifier taxon name match wcvp.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_original_to_BGCI.html","id":null,"dir":"Reference","previous_headings":"","what":"match_original_to_BGCI() — match_original_to_BGCI","title":"match_original_to_BGCI() — match_original_to_BGCI","text":"match_original_to_BGCI()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_original_to_BGCI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"match_original_to_BGCI() — match_original_to_BGCI","text":"","code":"match_original_to_BGCI(original_report, BGCI, taxon_name_col = \"TaxonName\")"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_original_to_BGCI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"match_original_to_BGCI() — match_original_to_BGCI","text":"original_report original_report BGCI BGCI taxon_name_col taxon_name_col","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_original_to_BGCI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"match_original_to_BGCI() — match_original_to_BGCI","text":"gardens","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_original_to_wcvp.html","id":null,"dir":"Reference","previous_headings":"","what":"Match report to POWO via taxon name — match_original_to_wcvp","title":"Match report to POWO via taxon name — match_original_to_wcvp","text":"Match report POWO via taxon name","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_original_to_wcvp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match report to POWO via taxon name — match_original_to_wcvp","text":"","code":"match_original_to_wcvp(   original_report,   wcvp,   taxon_name_col = \"TaxonName\",   taxon_name_full_col = NA,   taxon_author_col = NA,   typo_method = \"fast\",   try_add_split = TRUE,   try_fix_hybrid = TRUE,   try_rm_autonym = TRUE,   do_convert_accepted = TRUE )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_original_to_wcvp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match report to POWO via taxon name — match_original_to_wcvp","text":"original_report gardens original report wcvp POWO database taxon_name_col Column name original report taxon name taxon_name_full_col Column name original report taxon name author/s (combined) taxon_author_col Column name original report taxon author/s typo_method Flag whether search typos try_add_split Flag whether search missing f./var./subsp. try_fix_hybrid Flag whether search hybrid issues. try_rm_autonym Flag whether try removing autonyms. do_convert_accepted Flag whether convert accepted names POWO.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_original_to_wcvp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match report to POWO via taxon name — match_original_to_wcvp","text":"list length two containing: $match index match taxon_names wcvp, match goes record accepted status. $message message detailing match.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_rm_autonym.html","id":null,"dir":"Reference","previous_headings":"","what":"match_rm_autonym() — match_rm_autonym","title":"match_rm_autonym() — match_rm_autonym","text":"match_rm_autonym()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_rm_autonym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"match_rm_autonym() — match_rm_autonym","text":"","code":"match_rm_autonym(   taxon_names,   taxon_authors,   wcvp,   single_indices = NA,   mult_indices = NA )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_rm_autonym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"match_rm_autonym() — match_rm_autonym","text":"taxon_names taxon names taxon_authors taxon names author wcvp enrich information single_indices wcvp indices unique taxon name mult_indices wcvp indices non-unique taxon name","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_rm_autonym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"match_rm_autonym() — match_rm_autonym","text":"list match message","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_single_wcvp.html","id":null,"dir":"Reference","previous_headings":"","what":"match_single_wcvp() — match_single_wcvp","title":"match_single_wcvp() — match_single_wcvp","text":"Given taxon names want match (taxon_names), cleaned version plants world online ( wcvp imported function import_wcvp_names()) indices wcvp  records want math (wcvp_search_index). function designed match unique taxon names user restrict search indices unique taxon names subset names.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_single_wcvp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"match_single_wcvp() — match_single_wcvp","text":"","code":"match_single_wcvp(taxon_names, wcvp, wcvp_search_index)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_single_wcvp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"match_single_wcvp() — match_single_wcvp","text":"taxon_names vector taxon names wcvp cleaned POWO database wcvp_search_index Indices wcvp want search match","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_single_wcvp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"match_single_wcvp() — match_single_wcvp","text":"list length two containing: $match index match taxon_names wcvp $message message detailing match.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_single_wcvp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"match_single_wcvp() — match_single_wcvp","text":"matched index corresponds full wcvp data set. match found function returns NA. Moreover, function creates message taxon name detailing match found powo identifier taxon name match wcvp.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_taxon_status.html","id":null,"dir":"Reference","previous_headings":"","what":"match_taxon_status — match_taxon_status","title":"match_taxon_status — match_taxon_status","text":"match_taxon_status","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_taxon_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"match_taxon_status — match_taxon_status","text":"","code":"match_taxon_status(author_match, corres_POWO, current_message = \"\")"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_taxon_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"match_taxon_status — match_taxon_status","text":"author_match vector true false whether match corres_POWO corresponding entries POWO (rows must equal length author match) current_message current message","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_taxon_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"match_taxon_status — match_taxon_status","text":"list length 3","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_typos.html","id":null,"dir":"Reference","previous_headings":"","what":"match_typos() — match_typos","title":"match_typos() — match_typos","text":"match_typos()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_typos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"match_typos() — match_typos","text":"","code":"match_typos(   taxon_names,   taxon_authors,   wcvp,   single_indices = NA,   mult_indices = NA,   typo_method = \"fast\" )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_typos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"match_typos() — match_typos","text":"taxon_names taxon names taxon_authors taxon names author wcvp enrich information single_indices wcvp indices unique taxon name mult_indices wcvp indices non-unique taxon name typo_method method finding typos","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_typos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"match_typos() — match_typos","text":"list match message","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/sanitise_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Sanitising functions — sanitise_name","title":"Sanitising functions — sanitise_name","text":"Functions clean standardise taxonomic names authors.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/sanitise_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sanitising functions — sanitise_name","text":"","code":"sanitise_name(taxon_name)  sanitise_authors(taxon_authors)  sanitise_names_authors(taxon_names, taxon_authors = NA, taxon_names_full = NA)  sanitise_names_authors_report(   original_report,   taxon_name_col = \"TaxonName\",   taxon_name_full_col = NA,   taxon_author_col = NA )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/sanitise_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sanitising functions — sanitise_name","text":"taxon_name taxonomic name plant. taxon_authors vector taxonomic authors. taxon_names vector taxonomic names. taxon_names_full vector joined taxonomic name author. original_report dataframe collection taxon_name_col name column original_report corresponding taxonomic names. taxon_name_full_col name column original_report corresponding joined taxonomic names authors. taxon_author_col name column original_report corresponding authors taxonomic names.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/sanitise_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sanitising functions — sanitise_name","text":"sanitise_name() returns sanitised name single taxonomic name. sanitise_authors() returns sanitised name  taxonomic authors. characters coerced Latin-ASCII, thereby removing diacritics (e.g umlauts). clean_names_authors() sanitises multiple taxonomic names without corresponding authors, applying sanitise_name() sanitise_authors(). input vector taxonomic names required (taxon_names), addition vector authors (taxon_authors) joined taxonomic name authors (taxon_names_full) can provided. neither taxon_authors taxon_names_full provided author names set ''. list returned : $taxon_name vector sanitised taxonomic names, $authora vector sanitised authors, $sanitised logical vector whether taxon_name sanitised. clean_names_authors_report() applies clean_names_authors() collection inputs : data frame collection (original_report), column name taxonomic names (taxon_name_col, required), column name authors taxonomic names  (taxon_author_col, optional), column name combined taxonomic name author  (taxon_name_full_col, optional).","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/sanitise_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sanitising functions — sanitise_name","text":"","code":"sanitise_name('TRIGONELLA afghanica') #> [1] \"Trigonella afghanica\" sanitise_name('Halimium X pauanum') #> [1] \"Halimium × pauanum\" sanitise_name('Aruncus dioicus var acuminatus') #> [1] \"Aruncus dioicus var. acuminatus\" sanitise_authors('Stehlé') #> [1] \"Stehle\"  taxon_names = c('TRIGONELLA afghanica', 'Halimium X pauanum',  'Aruncus dioicus var acuminatus', 'Eupatorium magdalenae') taxon_authors = c('Vassilcz', 'Font Quer', '(Douglas ex Hook.) H.Hara', 'Stehlé')  sanitise_names_authors(taxon_names, taxon_authors) #> $taxon_name #> [1] \"Trigonella afghanica\"            \"Halimium × pauanum\"              #> [3] \"Aruncus dioicus var. acuminatus\" \"Eupatorium magdalenae\"           #>  #> $author #> [1] \"Vassilcz\"                  \"Font Quer\"                 #> [3] \"(Douglas ex Hook.) H.Hara\" \"Stehle\"                    #>  #> $sanitised #> [1]  TRUE  TRUE  TRUE FALSE #>   collection = data.frame(names = taxon_names, full = paste0(taxon_names, ' ', taxon_authors)) sanitise_names_authors_report(collection, taxon_name_col = 'names', taxon_name_full_col = 'full') #> $taxon_name #> [1] \"Trigonella afghanica\"            \"Halimium × pauanum\"              #> [3] \"Aruncus dioicus var. acuminatus\" \"Eupatorium magdalenae\"           #>  #> $author #> [1] \"Vassilcz\"                  \"Font Quer\"                 #> [3] \"(Douglas ex Hook.) H.Hara\" \"Stehle\"                    #>  #> $sanitised #> [1]  TRUE  TRUE  TRUE FALSE #>"},{"path":"https://jakepowellcubg.github.io/BGR/reference/shorten_message.html","id":null,"dir":"Reference","previous_headings":"","what":"shorten_message — shorten_message","title":"shorten_message — shorten_message","text":"shorten_message","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/shorten_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"shorten_message — shorten_message","text":"","code":"shorten_message(messages)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/shorten_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"shorten_message — shorten_message","text":"messages messages matching","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/shorten_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"shorten_message — shorten_message","text":"shorted form messages","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/typo_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon name typos — typo_list","title":"Taxon name typos — typo_list","text":"data frame common typos found taxon name fixes.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/typo_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon name typos — typo_list","text":"","code":"typo_list"},{"path":[]},{"path":"https://jakepowellcubg.github.io/BGR/reference/typo_list.html","id":"typo-list","dir":"Reference","previous_headings":"","what":"typo_list","title":"Taxon name typos — typo_list","text":"data frame 7,394 rows 2 columns: Original Original Taxon name typo Fixed Fixed Taxon name","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3.html","id":null,"dir":"Reference","previous_headings":"","what":"wgsrpd3 — wgsrpd3","title":"wgsrpd3 — wgsrpd3","text":"data frame containing BRU level 3 areas geometries.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wgsrpd3 — wgsrpd3","text":"","code":"wgsrpd3"},{"path":[]},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3.html","id":"wgsrpd-","dir":"Reference","previous_headings":"","what":"wgsrpd3","title":"wgsrpd3 — wgsrpd3","text":"data frame 369 rows 5 columns: Original Original Taxon name typo Fixed Fixed Taxon name","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level1_simp.html","id":null,"dir":"Reference","previous_headings":"","what":"wgsrpd3_level1_simp — wgsrpd3_level1_simp","title":"wgsrpd3_level1_simp — wgsrpd3_level1_simp","text":"data frame containing BRU level 1 areas simplified geometries using rmapshaper::ms_simplify.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level1_simp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wgsrpd3_level1_simp — wgsrpd3_level1_simp","text":"","code":"wgsrpd3_level1_simp"},{"path":[]},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level1_simp.html","id":"wgsrpd-level-simp","dir":"Reference","previous_headings":"","what":"wgsrpd3_level1_simp","title":"wgsrpd3_level1_simp — wgsrpd3_level1_simp","text":"data frame 369 rows 5 columns: Original Original Taxon name typo Fixed Fixed Taxon name","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level2_simp.html","id":null,"dir":"Reference","previous_headings":"","what":"wgsrpd3_level2_simp — wgsrpd3_level2_simp","title":"wgsrpd3_level2_simp — wgsrpd3_level2_simp","text":"data frame containing BRU level 2 areas simplified geometries using rmapshaper::ms_simplify.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level2_simp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wgsrpd3_level2_simp — wgsrpd3_level2_simp","text":"","code":"wgsrpd3_level2_simp"},{"path":[]},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level2_simp.html","id":"wgsrpd-level-simp","dir":"Reference","previous_headings":"","what":"wgsrpd3_level2_simp","title":"wgsrpd3_level2_simp — wgsrpd3_level2_simp","text":"data frame 369 rows 5 columns: Original Original Taxon name typo Fixed Fixed Taxon name","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level3_simp.html","id":null,"dir":"Reference","previous_headings":"","what":"wgsrpd3_level3_simp — wgsrpd3_level3_simp","title":"wgsrpd3_level3_simp — wgsrpd3_level3_simp","text":"data frame containing BRU level 3 areas simplified geometries using rmapshaper::ms_simplify.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level3_simp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wgsrpd3_level3_simp — wgsrpd3_level3_simp","text":"","code":"wgsrpd3_level3_simp"},{"path":[]},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level3_simp.html","id":"wgsrpd-level-simp","dir":"Reference","previous_headings":"","what":"wgsrpd3_level3_simp","title":"wgsrpd3_level3_simp — wgsrpd3_level3_simp","text":"data frame 369 rows 5 columns: Original Original Taxon name typo Fixed Fixed Taxon name","code":""}]
