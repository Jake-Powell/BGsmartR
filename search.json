[{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jakepowellcubg.github.io/BGR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jakepowellcubg.github.io/BGR/articles/Creating_enrich_databases.html","id":"world-checklist-of-vascular-plants","dir":"Articles","previous_headings":"","what":"World Checklist of Vascular Plants","title":"Creating_enrich_databases","text":"World Checklist Vascular Plants can downloaded via POWO’s website directly (click , can obtained using package rWCVPData (see details). WCVP split two databases: wcvp_names wcvp_distribution","code":""},{"path":[]},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Method of Matching taxonomic records","text":"Records collection matched via taxonomic name taxonomic author/s (provided). frustration taxonomic data often taxonomic name frequently unique - example Abies taxifolia. often compounded collections storing taxonomic author, resulting multiple matches. Moreover, since collections data often converted old paper records strong possibility mistakes typos taxonomic name. example hybridization marker might missed wrong infraspecific group used. Hence, method attempts match taxonomic names external databases whilst automatically accounting common issues. Matches taxonomic records found processing taxonomic name taxonomic author/s matching ‘pipeline’. pipeline summarized flow chart .  taxonomic record matched flowing pipeline shown. purple state indicated start algorithm. blue states correspond obtaining match (match), yellow process steps green decisions made algorithm. Steps algorithm (numbered diagram) explored Parts Algorithm section. matching functions discussed within wrapped together function enrich_collection() enrich collection information WCVP/Red list/BGCI. can used match enrich collection without concerning method applied. See vignette XX see function action. interest, discuss functions used matching taxonomic names, link together can used create custom-matching algorithm databases. Throughout mostly concern ourself matching WCVP.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"whole-algorithm","dir":"Articles","previous_headings":"","what":"Whole Algorithm","title":"Method of Matching taxonomic records","text":"match WCVP use function match_collection_to_wcvp() performs steps matching algorithm outlined previously. need define collection taxonomic names authors WCVP database running matching algorithm. wcvp database needs created using import_wcvp_names() BGSmartR. takes version WCVP POWO “enhances” include extra information required matching algorithm. example see matches found 5 7 inputted taxonomic names (positive $match). values match correspond row number wcvp matched record. Moreover, output provides $details_short $details describe matches occurred. Also outputted $match_taxon_name, $original_authors, $match_authors $author_check can used compare authors taxonomic names inputted collection wcvp. match_collection_to_wcvp() takes variety different inputs allow flexibility matching. example inputs include do_add_split: toggle whether search missing f./var./subsp, do_fix_hybrid: toggle whether search hybrid issues, do_rm_autonym: toggle whether try removing autonyms, typo_method: level typo finding required, do_convert_accepted: toggle whether convert accepted names, details can found function’s documentation.","code":"# Load (simplfied) wcvp. load('data/wcvp_matching_example.rda')  # Create collection database. ids = 1:7 taxon_names = c('Amsonia ciliata', 'Abies taxifolia', 'Acalypha gracilens f. fraseri',                 \"Petunia 'Night Sky'\", 'Artemisia pfaffii', 'Acmena hemilamprae', 'Amsonia gracilens') taxon_authors = c('Walter', 'Desf.', 'Weath.', '', 'Giacom. & Pignatti','L.M.Perry', 'L.') collection = data.frame(ids, taxon_names, taxon_authors)  # Run matching to wcvp. match_collection_to_wcvp(collection,                          wcvp = wcvp,taxon_name_column = 'taxon_names',                          taxon_author_column = 'taxon_authors',                          typo_method = 'All') #> ℹ `7` records found. #>  #> ── Extracting taxon names and authors from the original report ── #>  #> ── Reducing to unique taxon name and author combinations ── #>  #> ℹ `7` unique taxon names/ taxon name author combinations found. #> ℹ Found 0 exceptions to known not in POWO. #>  #> ── Removing known not to be in POWO from 7 names ── #>  #> ✔ Found 1 known not to be in POWO #>  #> ── Matching 6 names to unique taxon names ── #>  #> ✔ Found 1 of 6 names #>  #> ── Matching 5 names to non-unique taxon names ── #>  #> ✔ Found 1 of 5 names #>  #> ── Testing and matching taxon name issues for 4 names ── #>  #> ℹ Trying removing autonyms from taxon names #> ℹ Trying changing infraspecific level to 1 name #> ℹ Trying fixing hybrid for taxon names with 2/3/4 words 4 names #> ✔ Found 2 of 4 names #>  #> ── Testing and matching typos for 2 names ── #>  #> ✔ Found 1 of 2 names #>  #> ── Converting to accepted name.. ── #>  #> ✔ Updated to accepted name for 3 of 7 names #>  #> ── Matching Complete ── #>  #> $match #> [1] 35 39  7 -1 17 30 -3 #>  #> $details #> [1] \"Amsonia ciliata -> (matches record with single entry) -> (76904-1, Amsonia ciliata)\"                                                                                                                                              #> [2] \"Abies taxifolia -> (Multiple records in enriched database) -> (Exact author match) -> (261644-1, Abies taxifolia) -> (Go to accepted name) -> (60468511-2, Abies alba)\"                                                           #> [3] \"Acalypha gracilens f. fraseri -> (Try Fixing taxomonic name) -> Acalypha gracilens var. fraseri ->  (single fixed record) ->  (1280-2, Acalypha gracilens var. fraseri) -> (Go to accepted name) -> (1278-2, Acalypha gracilens)\" #> [4] \"Petunia 'Night Sky' -> (Cultivar or Indeterminate <Do not attempt matching>)\"                                                                                                                                                     #> [5] \"Artemisia pfaffii -> (Try Fixing taxomonic name) -> Artemisia × pfaffii ->  (single fixed record) ->  (179958-1, Artemisia × pfaffii)\"                                                                                            #> [6] \"Acmena hemilamprae -> (Typo) -> Acmena hemilampra -> (matches record with single entry) -> (590531-1, Acmena hemilampra) -> (Go to accepted name) -> (77072406-1, Syzygium hemilamprum)\"                                          #> [7] \"Amsonia gracilens -> (No match found)\"                                                                                                                                                                                            #>  #> $details_short #> [1] \"EXACT\"                 \"EXACT, ACCEPTED\"       \"ACCEPTED, FIX\"         #> [4] \"CULT/INDET\"            \"FIX\"                   \"EXACT, TYPO, ACCEPTED\" #> [7] \"NO_MATCH\"              #>  #> $match_taxon_name #> [1] \"Amsonia ciliata\"                 \"Abies taxifolia\"                 #> [3] \"Acalypha gracilens var. fraseri\" NA                                #> [5] \"Artemisia × pfaffii\"             \"Acmena hemilampra\"               #> [7] NA                                #>  #> $original_authors #> [1] \"Walter\"             \"Desf.\"              \"Weath.\"             #> [4] \"\"                   \"Giacom. & Pignatti\" \"L.M.Perry\"          #> [7] \"L.\"                 #>  #> $match_authors #> [1] \"Walter\"                       \"Desf.\"                        #> [3] \"(Mull.Arg.) Weath.\"           NA                             #> [5] \"Giacom. & Pignatti\"           \"(F.Muell.) Merr. & L.M.Perry\" #> [7] NA                             #>  #> $author_check #> [1] \"Identical\" \"Identical\" \"Partial\"   \"No Match\"  \"Identical\" \"Partial\"   #> [7] \"No Match\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"parts-of-the-algorithm","dir":"Articles","previous_headings":"","what":"Parts of the Algorithm","title":"Method of Matching taxonomic records","text":"section illustrate part matching algorithm. database want match collection’s taxonomic names refer enrichment database. Note information WCVP contained within two databases named wcvp_names wcvp_distribution. following matching examples match wcvp_names located wcvp$wcvp_names.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"sanitise-taxon-names","dir":"Articles","previous_headings":"Parts of the Algorithm","what":"1) Sanitise taxon names","title":"Method of Matching taxonomic records","text":"step used standardise format taxon name original report. standard format implement every character lower case except first letter Genus. standardise hybrid sign × rather x X (rare case h H). also ensure infraspecific level format f., var., subsp. nothosubsp.. Note sanitisation also performed enrichment database. WCVP performed import_wcvp_names(). apply sanitise_name() clean taxonomic names collection.","code":"sanitise_name('TRIGONELLA smyrnaea') #> [1] \"Trigonella smyrnaea\" sanitise_name('Halimium X pauanum') #> [1] \"Halimium × pauanum\" sanitise_name('Aruncus dioicus var acuminatus') #> [1] \"Aruncus dioicus var. acuminatus\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"remove-cultivars-and-indeterminantes","dir":"Articles","previous_headings":"Parts of the Algorithm","what":"2) Remove cultivars and indeterminantes","title":"Method of Matching taxonomic records","text":"step sets match -1 taxon names know appear enrichment database. WCVP includes cultivars indeterminates. find taxon names pattern matching particular check following patterns. Includes sp.. Includes gx. Includes gx. Includes 'XX' text XX. common notation cultivars. Includes [. Begins Indet. Ends indet. Ends cv. Includes cv.. Includes unkn. Ends hybrid. Includes unknown. performed using no_match_cultivar_indet(). taxon names set output message (Cultivar Indeterminate <attempt matching>).","code":"taxon_names = c('Acalypha fruticulosa', 'Asclepias sp.', \"Abies umbilicata 'Some Cultivar'\",                   'Ammi copticum cv.')  no_match_cultivar_indet(taxon_names) #> $match #> [1] NA -1 -1 -1 #>  #> $message #> [1] \"\"                                                          #> [2] \" -> (Cultivar or Indeterminate <Do not attempt matching>)\" #> [3] \" -> (Cultivar or Indeterminate <Do not attempt matching>)\" #> [4] \" -> (Cultivar or Indeterminate <Do not attempt matching>)\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"match-taxon-names-to-unique-taxon-names-in-enrichment-database","dir":"Articles","previous_headings":"Parts of the Algorithm","what":"3) Match taxon names to “unique” taxon names in enrichment database","title":"Method of Matching taxonomic records","text":"step matches taxon names collection records enrichment database “unique” taxonomic name. mean taxonomic name exists single record enrichment database multiple plants different authors sharing taxonomic name. taxonomic name unique matching decisions required (e.g authors). step performed using match_single(). see match list contains: $match corresponding row wcvp$wcvp_names, match return NA. $message informs match obtained, match message set ''. find match algorithm uses enrich_display_in_message_column default also provides powo_id (e.g. 108437-3) can used search plant directly POWO’s website. output code message can changed column wcvp$wcvp_names using input enrich_display_in_message_column. Moreover, function match can changed row number wcvp$wcvp_names column using input match_column, example","code":"# Choose some taxon names taxon_names = c(\"Amaranthus graecizans subsp. silvestris\", \"Amsonia ciliata\", \"Aristolochia islandica\", \"Adenocalymma scabriusculum\", \"Fake name\")  # Choose the indices of wcvp which correspond to a unique taxon name using `single_entry`. wcvp_search_index_single = which(wcvp$wcvp_names$single_entry == T)  # Perform the match match = match_single(taxon_names = taxon_names,                      enrich_database = wcvp$wcvp_names,                      enrich_database_search_index = wcvp_search_index_single,                      enrich_display_in_message_column = 'powo_id'                       ) match #> $match #> [1] 21 35 37 36 NA #>  #> $message #> [1] \" -> (matches record with single entry) -> (108437-3, Amaranthus graecizans subsp. silvestris)\" #> [2] \" -> (matches record with single entry) -> (76904-1, Amsonia ciliata)\"                          #> [3] \" -> (matches record with single entry) -> (19504-2, Aristolochia islandica)\"                   #> [4] \" -> (matches record with single entry) -> (108156-1, Adenocalymma scabriusculum)\"              #> [5] \"\" match_single(taxon_names = taxon_names, enrich_database = wcvp$wcvp_names,              enrich_database_search_index = wcvp_search_index_single,              enrich_display_in_message_column = 'plant_name_id') #> $match #> [1] 21 35 37 36 NA #>  #> $message #> [1] \" -> (matches record with single entry) -> (2632859, Amaranthus graecizans subsp. silvestris)\" #> [2] \" -> (matches record with single entry) -> (8441, Amsonia ciliata)\"                            #> [3] \" -> (matches record with single entry) -> (2651517, Aristolochia islandica)\"                  #> [4] \" -> (matches record with single entry) -> (319419, Adenocalymma scabriusculum)\"               #> [5] \"\" match_single(taxon_names = taxon_names, enrich_database = wcvp$wcvp_names,              enrich_database_search_index = wcvp_search_index_single,              match_column = 'taxon_status',              enrich_display_in_message_column = 'plant_name_id') #> $match #> [1] \"Accepted\" \"Accepted\" \"Accepted\" \"Accepted\" NA         #>  #> $message #> [1] \" -> (matches record with single entry) -> (2632859, Amaranthus graecizans subsp. silvestris)\" #> [2] \" -> (matches record with single entry) -> (8441, Amsonia ciliata)\"                            #> [3] \" -> (matches record with single entry) -> (2651517, Aristolochia islandica)\"                  #> [4] \" -> (matches record with single entry) -> (319419, Adenocalymma scabriusculum)\"               #> [5] \"\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"match-to-non-unique-taxon-names-in-enrichment-database","dir":"Articles","previous_headings":"Parts of the Algorithm","what":"4) Match to non-unique taxon names in enrichment database","title":"Method of Matching taxonomic records","text":"non-unique taxon names mean names multiple entries enrichment database (different authors). example suppose collection contains taxon name 'Abies taxifolia'. Searching WCVP find 6 records taxon name. decide record best matches plant collection first try match taxonomic author. possible match via taxonomic author can use custom matching criteria dependent enrichment database used. WCVP one option use taxon status accepted plant name determine best match. particular, records go accepted plant name just pick (later push matches accepted names). Otherwise, use taxon status first use record accepted, none accepted use synonym. obtain matches use match_multiple() applies author matching custom criterias. give example Abies taxifolia varying authors. see without author determine match ($match = -2) due use taxon status accepted plant name id matching criteria select single record (accepted plant name ids , multiple best taxon status synonym). author provided found matches. ‘Desf.’ author matches exactly record WCVP Jeffrey, Gor partially match J.Jeffrey ex Gordon & Glend.. default match_multiple() depends match_authors() no_additional_matching() performs author matching custom matching respectively. use additional_wcvp_matching() performs custom matching taxon_status accepted plant name id. can changed using inputs matching_authors matching_criterion. following subsections describe author matching custom matching.","code":"# Choose some taxon names taxon_names = rep('Abies taxifolia',4) taxon_authors = c('Desf.', 'Jeffrey', 'Gor', NA)  # Choose the indices of wcvp which correspond to a non-unique taxon name using `single_entry`. wcvp_search_index_mult = which(wcvp$wcvp_names$single_entry == F)  # Perform the match match = match_multiple(taxon_names = taxon_names,                        taxon_authors = taxon_authors,                        enrich_database = wcvp$wcvp_names,                         enrich_database_search_index = wcvp_search_index_mult,                        matching_criterion = BGSmartR::additional_wcvp_matching,                        enrich_plant_identifier_column = 'plant_name_id',                        show_progress = FALSE) match #> $match #> [1]  9 20 20 -2 #>  #> $message #> [1] \" -> (Multiple records in enriched database) -> (Exact author match) -> (, Abies taxifolia)\"               #> [2] \" -> (Multiple records in enriched database) -> (Partial author <most words>) -> (, Abies taxifolia)\"      #> [3] \" -> (Multiple records in enriched database) -> (Partial author <most words>) -> (, Abies taxifolia)\"      #> [4] \" -> (Multiple records in enriched database) -> (No authors) ->(multiple best taxon status, do not match)\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"matching-using-taxonomic-author-","dir":"Articles","previous_headings":"Parts of the Algorithm > 4) Match to non-unique taxon names in enrichment database","what":"Matching using taxonomic author.","title":"Method of Matching taxonomic records","text":"Author matching performed using match_authors(), takes author collection authors enrichment database compare. function initially try match author exactly. exact matches look partial matches (authors shared words). Example exact author match. Example partial match. default partial matching chooses records shares words author given collection (default input partial_method = 'words') can changed chose record level partial matching using partial_method = 'words'.","code":"# Restrict wcvp to only taxon_name = 'Abies taxifolia' wcvp_Abies_taxifolia = wcvp$wcvp_names[wcvp$wcvp_names$taxon_name == 'Abies taxifolia',]  # Get author name from the collection and author names from wcvp. collection_author = 'Desf.' wcvp_authors = wcvp_Abies_taxifolia$taxon_authors  # Match via authors matched_info = match_authors(collection_author, wcvp_authors) matched_info #> $wanted #> [1]  TRUE FALSE FALSE FALSE FALSE FALSE #>  #> $message #> [1] \"(Exact author match)\"  # Restrict wcvp_Abies_taxifolia to only matched authors  DT::datatable(wcvp_Abies_taxifolia[matched_info$wanted,c(1:3,5,6)],options = list(scrollX = TRUE)) #Change author name for the collection collection_author = 'Jeffrey'  # Match via authors matched_info = match_authors(collection_author,wcvp_authors) matched_info #> $wanted #> [1] FALSE FALSE FALSE FALSE FALSE  TRUE #>  #> $message #> [1] \"(Partial author <most words>)\"  # Restrict wcvp_Abies_taxifolia to only matched authors DT::datatable(wcvp_Abies_taxifolia[matched_info$wanted,c(1:3,5,6)],options = list(scrollX = TRUE))"},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"custom-matching-","dir":"Articles","previous_headings":"Parts of the Algorithm > 4) Match to non-unique taxon names in enrichment database","what":"Custom matching.","title":"Method of Matching taxonomic records","text":"Custom matching performed called matching_criteria() function, takes extract enrichment database (often idenitical taxon names) attempts choose best record using criteria returns rows correspond best match. allow flexibility function can passed input matching_criteria match_multiple(). package contains two custom matching criteria no_additional_matching() additional_wcvp_matching(). default no_additional_matching() used. no_additional_matching() always returns rows message ‘unclear, match’. corresponds applying custom matching. additional_wcvp_matching() matches records first looking accepted_plant_name_id WCVP records passed , accepted plants names function returns accepted taxon status row non exists just first row. differences accepted_plant_name_id function looks taxon_status returns rows accepted, non accepted synonyms. couple examples given .","code":"# Apply to first 3 rows of taxon name  = Abies_taxifolia (i.e all have the same accepted plant name id) additional_wcvp_matching(wcvp_Abies_taxifolia[1:3,]) #> $row #> [1] 1 #>  #> $message #> [1] \"(all point to same accepted plant)\"  # Apply to rows 1,4,6 of taxon name  = Abies_taxifolia (i.e differing accepted plant name ids only only has taxon status = synonym) additional_wcvp_matching(wcvp_Abies_taxifolia[c(1,4,6),]) #> $row #> [1] 1 #>  #> $message #> [1] \"(choose via taxon_status)\"  # Apply to rows 1,4,6 of taxon name  = Abies_taxifolia (i.e differing accepted plant name ids all taxon status = synonym) additional_wcvp_matching(wcvp_Abies_taxifolia[c(1,5),]) #> $row #> [1] 1 2 #>  #> $message #> [1] \"(multiple best taxon status, do not match)\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"creating-new-custom-matching-criteria","dir":"Articles","previous_headings":"Parts of the Algorithm > 4) Match to non-unique taxon names in enrichment database > Custom matching.","what":"Creating new custom matching criteria","title":"Method of Matching taxonomic records","text":"create new custom matching function need function takes extract enrichment database input returns list $row best rows $message detailing custom matching . Within wcvp_names column called publication_author suppose decide match via author want use records publication_author. create new matching criteria function called wcvp_publication_matching(). Check function works hoped. see function returns forth row corresponds Abies taxifolia record WCVP publication author. can now apply matching criteria function match_multiple(). see change matching criterion now finds match forth record, whereas previous record matched based taxon status accepted plant name id.","code":"wcvp_publication_matching <- function(enrich_database_extract, message = ''){   # Sanity checks.   if(!'publication_author' %in% names(enrich_database_extract)){     stop('No column called publication_author in enrichment database')   }      # Find the records with non-NA publication_author.   rows = which(!is.na(enrich_database_extract$publication_author))      # If there are records with non-NA publication_author return these rows.   if(length(rows) > 0){     message = paste0(message, '(Choose record with publication_author)')     return(list(row = rows, message = message))   }     # all publication_author are NA.    message = paste0(message, '(All publication_author are NA)') return(list(row = 1:nrow(enrich_database_extract), message = message)) } # publication_authors in wcvp_Abies_taxifolia. wcvp_Abies_taxifolia$publication_author #> [1] NA                   NA                   NA                   #> [4] \"J.B.A.M.de Lamarck\" NA                   NA # New matching criteria. wcvp_publication_matching(wcvp_Abies_taxifolia) #> $row #> [1] 4 #>  #> $message #> [1] \"(Choose record with publication_author)\" # Perform the match match = match_multiple(taxon_names = taxon_names,                        taxon_authors = taxon_authors,                        enrich_database = wcvp$wcvp_names,                         enrich_database_search_index = wcvp_search_index_mult,                        matching_criterion = wcvp_publication_matching,                        enrich_plant_identifier_column = 'plant_name_id',                        show_progress = FALSE) match #> $match #> [1]  9 20 20 13 #>  #> $message #> [1] \" -> (Multiple records in enriched database) -> (Exact author match) -> (, Abies taxifolia)\"                                   #> [2] \" -> (Multiple records in enriched database) -> (Partial author <most words>) -> (, Abies taxifolia)\"                          #> [3] \" -> (Multiple records in enriched database) -> (Partial author <most words>) -> (, Abies taxifolia)\"                          #> [4] \" -> (Multiple records in enriched database) -> (No authors) ->(Choose record with publication_author) -> (, Abies taxifolia)\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"combining-custom-matching-criterias","dir":"Articles","previous_headings":"Parts of the Algorithm > 4) Match to non-unique taxon names in enrichment database > Custom matching.","what":"Combining custom matching criterias","title":"Method of Matching taxonomic records","text":"advantage approach used easy combine multiple custom matching criterias new criteria function. applying function onto cases ","code":"wcvp_combined_custom_matching <- function(enrich_database_extract, message = ''){   ### Taxon status and accepted name id matching.   match_A = BGSmartR::additional_wcvp_matching(enrich_database_extract, message)      # If only one record remains after additional_wcvp_matching return it   if(length(match_A$row)==1){     return(match_A)   }      ### update extract and message prior to publication author matching   enrich_database_extract = enrich_database_extract[match_A$row,]   message = match_A$message       ### publication author matching.   match_B = wcvp_publication_matching(enrich_database_extract, message)      return(match_B) } # Apply to first 3 rows of taxon name  = Abies_taxifolia (i.e all have the same accepted plant name id) wcvp_combined_custom_matching(wcvp_Abies_taxifolia[1:3,]) #> $row #> [1] 1 #>  #> $message #> [1] \"(all point to same accepted plant)\"  # Apply to rows 1,4,6 of taxon name  = Abies_taxifolia (i.e differing accepted plant name ids only only has taxon status = synonym) wcvp_combined_custom_matching(wcvp_Abies_taxifolia[c(1,4,6),]) #> $row #> [1] 1 #>  #> $message #> [1] \"(choose via taxon_status)\"  # Change the forth taxon_status to synonym so that custom matching will first restrict to synonym then choose the record with publication author. wcvp_Abies_taxifolia$taxon_status[4] = 'Synonym' wcvp_combined_custom_matching(wcvp_Abies_taxifolia) #> $row #> [1] 4 #>  #> $message #> [1] \"(multiple best taxon status, do not match)(Choose record with publication_author)\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"check-original-author-names-compared-to-matched-authors","dir":"Articles","previous_headings":"Parts of the Algorithm","what":"5) Check original author names compared to matched authors","title":"Method of Matching taxonomic records","text":"Another quirk matching taxon names occasionally possible find match taxon names identical differing authors slight change taxon name yield match identical authors. example suppose collection Salix fragilis author L., WCVP following: see case matching criteria can identify one first three records best match without additional checks go incorrect match. account pitfall initial matching taxonomic name authors agree search fixes taxonomic name improved author match. use author_check() compare authors, output one Exact match, authors identical. Partial match, authors split words least one word contained (.e word original author matched author, vice versa). Different, authors categories. author_check() equal Different run match_all_issue() attempts fix taxon name find matches. match found method author check improves Partial Exact update match record fixed taxon name.","code":"author_check('Oliv.','Oliv.') #> [1] \"Identical\" author_check('(Bong.) D.Don (Piper) C.L.Hitche','(Piper) C.H.Hitchc.') #> [1] \"Partial\" author_check('L.','(W.D.J.Koch) Arcang.') #> [1] \"Different\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"fix-the-taxon-name","dir":"Articles","previous_headings":"Parts of the Algorithm","what":"6) Fix the taxon name","title":"Method of Matching taxonomic records","text":"get stage algorithm either: taxonomic name found enrichment database, taxonomic name found authors different. Therefore, want make small adjustments taxonomic name see adjusts leads name found enrichment database. changes make step try common mistakes taxonomic name includes: Change/Add/Remove infraspecific levels. Change/Add/Remove hybridisation markers. Removing autonyms. fixing performed match_all_issue(). see taxon name fixed version found put forward match. method finding fixed taxon names separate function, namely try_fix_infraspecific_level(), try_fix_hybrid() try_rm_autonym(). functions creates potential new taxon names checks whether enrichment database’s taxon names. combine names given method find best match via author matching custom matching. methods yield multiple potential matches select via method used get fixed taxon name. particular, select first records obtains try_fix_infraspecific_level() try_fix_hybrid() finally try_rm_autonym().","code":"taxon_names = c('Salix fragilis', 'Acalypha gracilens f. fraseri', 'Abies alba var. alba') taxon_authors = c('L.', '(Müll.Arg.) Weath.', 'Mill.') match_all_issue(taxon_names = taxon_names,                 taxon_authors = taxon_authors,                 enrich_database = wcvp$wcvp_names,                 enrich_plant_identifier_column = 'plant_name_id' ) #> ℹ Trying removing autonyms from taxon names #> ℹ Trying changing infraspecific level to 2 names #> ℹ Trying fixing hybrid for taxon names with 2/3/4 words 3 names #> $match #> [1] 33  6 39 #>  #> $message #> [1] \" -> (Try Fixing taxomonic name) -> Salix × fragilis ->  (single fixed record) ->  (, Salix × fragilis)\"                               #> [2] \" -> (Try Fixing taxomonic name) -> Acalypha gracilens var. fraseri ->  (single fixed record) ->  (, Acalypha gracilens var. fraseri)\" #> [3] \" -> (Try Fixing taxomonic name) -> Abies alba -> (Exact author match)\" # Get the taxon names in the enrichment database enrich_database_taxon_names = unique(wcvp$wcvp_names$taxon_name)  # Try and find fixed taxon names via fixing  infraspecific level. try_fix_infraspecific_level(taxon_names = c('Amaranthus graecizans var. silvestris',                                             'Aesculus × rubicunda whitleyi',                                             'Abelia serrata gymnocarpa'),                             enrich_database_taxon_names = enrich_database_taxon_names) #> ℹ Trying adding infraspecific level to 1 name #> ℹ Trying adding infraspecific level (taxon with hybrid markers) to 1 name #> ℹ Trying changing infraspecific level to 1 name #> [1] \"Amaranthus graecizans subsp. silvestris\"                        #> [2] \"Aesculus × rubicunda var. whitleyi\"                             #> [3] \"Abelia serrata var. gymnocarpa OR Abelia serrata f. gymnocarpa\"  try_fix_hybrid(taxon_names = c('Aesculus rubicunda var. whitleyi',                                             'Acer + pseudocreticum',                                             'Salix fragilis'),                             enrich_database_taxon_names = enrich_database_taxon_names) #> ℹ Trying fixing hybrid for taxon names with 2/3/4 words 3 names #> ℹ Trying changing/removing hybrid for taxon names 1 name #> [1] \"Aesculus × rubicunda var. whitleyi\" \"Acer × pseudocreticum\"              #> [3] \"Salix × fragilis\"  try_rm_autonym(taxon_names = c('Adina nobilis var. nobilis'),                             enrich_database_taxon_names = enrich_database_taxon_names) #> ℹ Trying removing autonyms from taxon names #> [1] \"Adina nobilis\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"typo-finding","dir":"Articles","previous_headings":"Parts of the Algorithm","what":"7) Typo finding","title":"Method of Matching taxonomic records","text":"taxon name reaches stage match found neither fixing taxon name yield match. Therefore, final attempt find match search simple common typos taxon name. Typos found three ways: searching data frame known typos, searching common issues found taxon name, searching single letter change taxon name. typo found corresponding record selected. .e. first typo selected search done. match_typos() performs typo searching matching. step can computationally expensive, therefore include input typo_method allows 3 different levels typo checking.typo_method = \"\" maximum level performs typo checking. typo_method = \"Data frame + Common\" intermediate level tries known typos common fixes. typo_method = \"Data frame \" minimum level checks whether typos found known typos data frame. outline three methods finding typos.","code":"taxon_names = c('Artemisia × pfaffi', 'Adina racemosae') taxon_authors = c('Giacom. & Pignatti', '(Siebold & Zucc.) Miq.')  match_typos(taxon_names, taxon_authors,             enrich_database = wcvp$wcvp_names,             typo_method = 'All',             enrich_display_in_message_column = 'powo_id') #> $match #> [1] 17 29 #>  #> $message #> [1] \" -> (Typo) -> Artemisia × pfaffii -> (matches record with single entry) -> (179958-1, Artemisia × pfaffii)\" #> [2] \" -> (Typo) -> Adina racemosa -> (matches record with single entry) -> (742931-1, Adina racemosa)\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"searching-a-data-frame-of-original-names-and-fixed-names","dir":"Articles","previous_headings":"Parts of the Algorithm > 7) Typo finding","what":"Searching a data frame of original names and fixed names","title":"Method of Matching taxonomic records","text":"package include data frame typos BGSmartR::typo_list. contains 10,824 typos found collections. first find typos checking BGSmartR::typo_list.","code":"head(BGSmartR::typo_list) #>                            original                        fixed #> 33394    × Amarcrinum memoriacorsii  × Amarcrinum memoria-corsii #> 32305 × Cratae-mespilus grandiflora × Crataemespilus grandiflora #> 9258        × Halimiocistus revolii     × Halimiocistus revoilii #> 28802      × Jancaemonda vandedemii     × Jankaemonda vandedemii #> 1403        × Laburnocytisus adamii       × Laburnocytisus adami #> 29990       × Mahoberberis neuberti     × Mahoberberis neubertii"},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"searching-for-common-issues-found-in-taxon-names","dir":"Articles","previous_headings":"Parts of the Algorithm > 7) Typo finding","what":"Searching for common issues found in taxon names","title":"Method of Matching taxonomic records","text":"found match typo list check common issues found taxon names. particular check following changes end species name. ‘’ <-> ‘ii’ ‘’ <-> ‘ae’ ‘’ <-> ‘um’ ‘’ <-> ‘us’ ‘ae’ <-> ‘eae’ ‘e’ <-> ‘’ ‘’ <->‘e’ ‘us’ <-> ‘’ ‘ense’ <->‘iense’ ‘oides’ <-> ‘ioides’ ‘orum’ <-> ‘iorum’ also check following patterns anywhere taxon name: ‘’ <-> ‘ae’","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"searching-for-a-single-change-in-letter","dir":"Articles","previous_headings":"Parts of the Algorithm > 7) Typo finding","what":"Searching for a single change in letter","title":"Method of Matching taxonomic records","text":"final stage performs larger check change single character. involves: Checking removing single character taxon name positions. Checking adding single character (-z ‘-’) positions. Changing current letter character -z positions.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"update-matches-to-accepted-names-wcvp-only","dir":"Articles","previous_headings":"Parts of the Algorithm","what":"Update matches to accepted names (WCVP only)","title":"Method of Matching taxonomic records","text":"update taxon names accepted form use field accepted_plant_name_id WCVP. accepted_plant_name_id match plant_name_id update match correspond accepted plant. performed function convert_to_accepted_name() BGSmartR, takes current state matches updates accepted form. example given . see first two taxon names go accepted form third . shown $match remaining empty $message running convert_to_accepted_name(). can check accepted name using codes provided message POWO’s website. done changing last part URL. example Adina nobilis can found address https://powo.science.kew.org/taxon/urn:lsid:ipni.org:names:742921-1. see indeed synonym Adina racemosa.","code":"taxon_names = c('Adina nobilis', 'Acalypha gracilens var. fraseri',                 'Andira zehntneri')  # Get the original match. match = match_single(taxon_names,wcvp$wcvp_names,wcvp_search_index_single,                      enrich_display_in_message_column = 'powo_id') match #> $match #> [1]  5  6 15 #>  #> $message #> [1] \" -> (matches record with single entry) -> (742921-1, Adina nobilis)\"                 #> [2] \" -> (matches record with single entry) -> (1280-2, Acalypha gracilens var. fraseri)\" #> [3] \" -> (matches record with single entry) -> (12614-2, Andira zehntneri)\"  # Try to convert to accepted name. new_match = convert_to_accepted_name(match$match, wcvp$wcvp_names) new_match #> $match #> [1] 29  7 15 #>  #> $message #> [1] \" -> (Go to accepted name) -> (742931-1, Adina racemosa)\"   #> [2] \" -> (Go to accepted name) -> (1278-2, Acalypha gracilens)\" #> [3] \"\"  # Putting the messages together. messages = paste0(match$message, new_match$message) messages #> [1] \" -> (matches record with single entry) -> (742921-1, Adina nobilis) -> (Go to accepted name) -> (742931-1, Adina racemosa)\"                   #> [2] \" -> (matches record with single entry) -> (1280-2, Acalypha gracilens var. fraseri) -> (Go to accepted name) -> (1278-2, Acalypha gracilens)\" #> [3] \" -> (matches record with single entry) -> (12614-2, Andira zehntneri)\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/Matching.html","id":"set-remaining-to-not-matched","dir":"Articles","previous_headings":"Parts of the Algorithm","what":"8) Set remaining to not matched","title":"Method of Matching taxonomic records","text":"unmatched taxon names steps mentioned previously match index set -3, message equals (match found).","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/value_of_items.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Adding value to items in a collection","text":"first need load collection. want value items collection depend provenance, endemism, rarity taxa globally whether items threatened. dependents contained within collection. need create “sub-list” outlined . Provenance Within collection column called ProvenanceCode contains values “G”, “U”, “W”, “Z” corresponding plants garden origin, unknown origin, wild-derived origin wild origin respectively. value W > Z > G > U. Therefore give values: W = 1, Z = 0.5, G = 0.1 U = 0. now give column weight equal one. want exactly match codes values within ProvenanceCode set type = 'Exact'. Within R comes Endemism plant endemic comes single region. Currently, column within collection stating whether item endemic . create new column able use scoring condition. Note column POWO_Dist_000_area_code_l3 string level 3 area codes plant found . Moreover, code length three (e.g. MLW, MOZ, ZIM). Therefore extract endemic items need search records single code. words POWO_Dist_000_area_code_l3 length three. Rarity taxa globally rarity contained column no_gardens givens number collections globally plant found . value 1 175. give number gardens value large details data frame, however bit clumbersome. Therefore case change type = 'Number range (int)' names now given format XX:YY specifying range numbers value. Threatened now individual scoring dependents contain one list detailing scoring system. can now use dependents input value_of_items() calculate value item collection. can add value collection used analysis can use find items collection largest value.","code":"# Load a sample collection. load('data/value_of_items_collection_example.rda') ## Provenance. provenance = list(column = 'ProvenanceCode', weight = 1,                   details = data.frame(names = c(\"G\", \"U\", \"W\", \"Z\"), value = c(0.1, 0, 1, 0.5)), type = 'Exact') provenance #> $column #> [1] \"ProvenanceCode\" #>  #> $weight #> [1] 1 #>  #> $details #>   names value #> 1     G   0.1 #> 2     U   0.0 #> 3     W   1.0 #> 4     Z   0.5 #>  #> $type #> [1] \"Exact\" ## Endemism. collection$endemic = rep('Not endemic', nrow(collection)) endemic_index = which(stringr::str_length(collection$POWO_Dist_000_area_code_l3) ==3) collection$endemic[endemic_index] = 'Endemic'  endemism = list(column = 'endemic', weight = 1,                   details = data.frame(names = 'Endemic', value = 1), type = 'Exact') endemism #> $column #> [1] \"endemic\" #>  #> $weight #> [1] 1 #>  #> $details #>     names value #> 1 Endemic     1 #>  #> $type #> [1] \"Exact\" ## 3) Rarity. rarity = list(column = 'no_gardens', weight = 1,                   details = data.frame(names = c('0:10', '11:50', '50:1000'), value = c(1,0.5,0.1)), type = 'Number range (int)') rarity #> $column #> [1] \"no_gardens\" #>  #> $weight #> [1] 1 #>  #> $details #>     names value #> 1    0:10   1.0 #> 2   11:50   0.5 #> 3 50:1000   0.1 #>  #> $type #> [1] \"Number range (int)\" ## 4) Threatened. threatened = list(column = 'POWO_Red_category', weight = 1,                   details = data.frame(names = c('EW', 'CR', 'EN', 'VU', 'NT'), value = c(1, 0.9, 0.8, 0.7, 0.3)), type = 'Exact') threatened #> $column #> [1] \"POWO_Red_category\" #>  #> $weight #> [1] 1 #>  #> $details #>   names value #> 1    EW   1.0 #> 2    CR   0.9 #> 3    EN   0.8 #> 4    VU   0.7 #> 5    NT   0.3 #>  #> $type #> [1] \"Exact\" ## Combine. dependents = list(provenance = provenance, endemism  = endemism, rarity = rarity, threatened = threatened) values = BGSmartR::value_of_items(collection, dependents)  # Show total value of first 10 items. values$total_value[1:10] #>  [1] 0.2 0.1 0.2 0.1 0.6 0.6 1.4 0.2 2.0 0.8  # Show breakdown of value for first 10 items values$value_breakdown[1:10,] #>    provenance endemism rarity threatened #> 1         0.1        0    0.1        0.0 #> 2         0.1        0    0.0        0.0 #> 3         0.1        0    0.1        0.0 #> 4         0.1        0    0.0        0.0 #> 5         0.1        0    0.5        0.0 #> 6         0.1        0    0.5        0.0 #> 7         1.0        0    0.1        0.3 #> 8         0.1        0    0.1        0.0 #> 9         1.0        0    1.0        0.0 #> 10        0.0        0    0.1        0.7 collection$value = values$total_value top100_index = rev(order(collection$value))[1:100] top100_value = collection[top100_index,]"},{"path":"https://jakepowellcubg.github.io/BGR/articles/value_of_items.html","id":"examples-of-other-value-conditions","dir":"Articles","previous_headings":"Example","what":"Examples of other value conditions","title":"Adding value to items in a collection","text":"gave example giving items value provenance, endemism, rarity taxa globally whether items threatened. section give examples conditions can used giving items value.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/articles/value_of_items.html","id":"value-on-a-particualar-native-location-","dir":"Articles","previous_headings":"Example > Examples of other value conditions","what":"Value on a particualar native location.","title":"Adding value to items in a collection","text":"might want give value items native location collection. example collection Great Britain use following: use type = 'Grepl' allows pattern searching within column interest. case, code GBR found string level 3 area codes plant distributed gain value 1 otherwise value added.","code":"native_GB = list(column = 'POWO_Dist_000_area_code_l3', weight = 1,                   details = data.frame(names = c('GBR'), value = c(1)), type = 'Grepl') native_GB #> $column #> [1] \"POWO_Dist_000_area_code_l3\" #>  #> $weight #> [1] 1 #>  #> $details #>   names value #> 1   GBR     1 #>  #> $type #> [1] \"Grepl\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/value_of_items.html","id":"value-on-rarity-within-the-collection","dir":"Articles","previous_headings":"Example > Examples of other value conditions","what":"Value on rarity within the collection","title":"Adding value to items in a collection","text":"need create new column number items collection . can now use column value condition","code":"# Assume we can use taxon name (i.e the collection doesn't have records with identical taxon name and differing authors) # Get the taxon name from POWO if matched otherwise use the original name in the collection taxon_name = collection$POWO_taxon_name taxon_name[is.na(taxon_name)] = collection$TaxonName[is.na(taxon_name)]  # Get the number of occurrences in the collection and add as `collection$count_in_collection`. taxon_name_count = data.frame(table(taxon_name)) count_in_collection = taxon_name_count$Freq[match(taxon_name, as.character(taxon_name_count$taxon_name))] collection$count_in_collection = count_in_collection number_in_collection = list(column = 'count_in_collection', weight = 1,                   details = data.frame(names = c('1', '2:3', '4:8'), value = c(1, 0.5, 0.2)), type = 'Number range (int)') number_in_collection #> $column #> [1] \"count_in_collection\" #>  #> $weight #> [1] 1 #>  #> $details #>   names value #> 1     1   1.0 #> 2   2:3   0.5 #> 3   4:8   0.2 #>  #> $type #> [1] \"Number range (int)\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/value_of_items.html","id":"discount-cultivars-","dir":"Articles","previous_headings":"Example > Examples of other value conditions","what":"Discount cultivars.","title":"Adding value to items in a collection","text":"Perhaps like cultivars.","code":"dislike_cultivars = list(column = 'infrageneric_level', weight = 1,                   details = data.frame(names = c('cultivar'), value = c(-1)), type = 'Grepl') dislike_cultivars #> $column #> [1] \"infrageneric_level\" #>  #> $weight #> [1] 1 #>  #> $details #>      names value #> 1 cultivar    -1 #>  #> $type #> [1] \"Grepl\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/value_of_items.html","id":"value-for-finding-a-match-to-powo-","dir":"Articles","previous_headings":"Example > Examples of other value conditions","what":"Value for finding a match to POWO.","title":"Adding value to items in a collection","text":"Perhaps want add value item found POWO.","code":"# Add column `in_POWO` with the detail required. in_POWO = rep('No', nrow(collection)) in_POWO[!is.na(collection$POWO_powo_id)] = 'Yes' collection$in_POWO = in_POWO  # Create dependent. item_in_POWO = list(column = 'in_POWO', weight = 1,                   details = data.frame(names = c('Yes'), value = c(1)), type = 'Exact') item_in_POWO #> $column #> [1] \"in_POWO\" #>  #> $weight #> [1] 1 #>  #> $details #>   names value #> 1   Yes     1 #>  #> $type #> [1] \"Exact\""},{"path":"https://jakepowellcubg.github.io/BGR/articles/value_of_items.html","id":"value-for-a-continuous-numeric-column","dir":"Articles","previous_headings":"Example > Examples of other value conditions","what":"Value for a continuous numeric column","title":"Adding value to items in a collection","text":"Suppose want gives values column non-whole number values. can use type = ‘Number range’. Note range format 'Number range (int)', namely XX:YY. matching condition now elements E XX YY \\(E \\geq XX \\text{ } E \\leq YY\\). give example first create fake column data sampling standard uniform distribution.","code":"# Create and add the new_column to the collection. new_column = runif(nrow(collection)) collection$new_column = new_column  # Show the first 10 values of the new column. collection$new_column[1:10] #>  [1] 0.96123490 0.30475304 0.90939935 0.62560576 0.24427219 0.89661596 #>  [7] 0.76517307 0.29224915 0.78725139 0.03075445  # Create dependent. non_integer_score = list(column = 'new_column', weight = 1,                   details = data.frame(names = c('0:0.25', '0.25:0.75','0.75:1'), value = c(1, 0.5, 0.1)), type = 'Number range') non_integer_score #> $column #> [1] \"new_column\" #>  #> $weight #> [1] 1 #>  #> $details #>       names value #> 1    0:0.25   1.0 #> 2 0.25:0.75   0.5 #> 3    0.75:1   0.1 #>  #> $type #> [1] \"Number range\""},{"path":"https://jakepowellcubg.github.io/BGR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jake Powell. Author, maintainer.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Powell J (2023). BGSmartR: Analyse Botanic Garden collections. R package version 0.0.0.9000, https://jakepowellcubg.github.io/BGR/.","code":"@Manual{,   title = {BGSmartR: Analyse Botanic Garden collections},   author = {Jake Powell},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://jakepowellcubg.github.io/BGR/}, }"},{"path":"https://jakepowellcubg.github.io/BGR/index.html","id":"id_-bgr","dir":"","previous_headings":"","what":"# BGR","title":"Analyse Botanic Garden collections","text":"📦 BGR package used enriching living collections records creating report analysis’ collections.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyse Botanic Garden collections","text":"can install BGR calling following command:","code":"devtools::install_github(\"JakePowellCUBG/BGR\", dependencies = TRUE) #for development version"},{"path":"https://jakepowellcubg.github.io/BGR/reference/BGSmartR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"BGSmartR: Analyse Botanic Garden collections — BGSmartR-package","title":"BGSmartR: Analyse Botanic Garden collections — BGSmartR-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://jakepowellcubg.github.io/BGR/reference/BGSmartR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"BGSmartR: Analyse Botanic Garden collections — BGSmartR-package","text":"Maintainer: Jake Powell jjp68@cam.ac.uk (ORCID)","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Add transparency to colours — add_alpha","title":"Add transparency to colours — add_alpha","text":"Add transparency colours","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add transparency to colours — add_alpha","text":"","code":"add_alpha(col, alpha = 1)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_alpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add transparency to colours — add_alpha","text":"col vector colours. alpha numeric (0,1], transparency wanted.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_alpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add transparency to colours — add_alpha","text":"vector colours added transparency","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_alpha.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add transparency to colours — add_alpha","text":"","code":"add_alpha(col = c(\"blue\", rgb(100,20,30, max = 255), '#0A461E', viridis::viridis(1)), alpha = 0.5) #>        blue     #64141E     #0A461E   #440154FF  #> \"#0000FF80\" \"#64141E80\" \"#0A461E80\" \"#44015480\""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_status_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Add status year column to collection — add_status_year","title":"Add status year column to collection — add_status_year","text":"function adjoin year item status date collection database.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_status_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add status year column to collection — add_status_year","text":"","code":"add_status_year(collection, item_status_date_column = \"ItemStatusDate\")"},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_status_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add status year column to collection — add_status_year","text":"collection data frame containing collection. item_status_date_column name column containing item status date.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_status_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add status year column to collection — add_status_year","text":"collection data frame status_year adjoined.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_status_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add status year column to collection — add_status_year","text":"","code":"taxon_names = c('Trigonella afghanica', 'Eupatorium magdalenae') item_status = c('2021-04-12', '12th August 1991') collection = data.frame(name = taxon_names, item_status = item_status) add_status_year(collection, item_status_date_column ='item_status') #>                    name      item_status status_year #> 1  Trigonella afghanica       2021-04-12        2021 #> 2 Eupatorium magdalenae 12th August 1991        1991"},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_wcvp_distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add wcvp_distributions information to wcvp_names — add_wcvp_distributions","title":"Add wcvp_distributions information to wcvp_names — add_wcvp_distributions","text":"allow three methods uploading information wcvp_distributions: choosing file path csv file containing information using filepath. loading R save (file type .RData, .rdata, .rda .rds) via filepath. using package  rWCVPData, setting use_rWCVPData = TRUE.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_wcvp_distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add wcvp_distributions information to wcvp_names — add_wcvp_distributions","text":"","code":"add_wcvp_distributions(filepath, wcvp, use_rWCVPdata = FALSE)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_wcvp_distributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add wcvp_distributions information to wcvp_names — add_wcvp_distributions","text":"filepath path wcvp_distributions.csv file. wcvp Output import_wcvp_names use_rWCVPdata Flag whether use rWCVPdata get wcvp_distributions","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/add_wcvp_distributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add wcvp_distributions information to wcvp_names — add_wcvp_distributions","text":"Desired information wcvp_distributions.csv combined wcvp_names.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two authors — author_check","title":"Compare two authors — author_check","text":"Compare two authors","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two authors — author_check","text":"","code":"author_check(original_author, proposed_author)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two authors — author_check","text":"original_author, proposed_author authors compared.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two authors — author_check","text":"Either `Identical', 'Partial' 'Different'.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare two authors — author_check","text":"result comparison : \"Identical\" two author strings equal (original_author == proposed_author), \"Partial\" words either author found . Author words found using author_words(). \"Different\" otherwise.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two authors — author_check","text":"","code":"author_check(\"Schott\", \"Schott\") #> [1] \"Identical\" author_check(\"Scott\", \"Schott\") #> [1] \"Different\" author_check(\"(Jacq.) Schott\", \"Schott\") #> [1] \"Partial\""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_from_taxon_name_full.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate author from combined taxonomic name and author — author_from_taxon_name_full","title":"Separate author from combined taxonomic name and author — author_from_taxon_name_full","text":"Extract taxonomic author combined taxonomic name author combined.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_from_taxon_name_full.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate author from combined taxonomic name and author — author_from_taxon_name_full","text":"","code":"author_from_taxon_name_full(taxon_names, taxon_names_full)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_from_taxon_name_full.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate author from combined taxonomic name and author — author_from_taxon_name_full","text":"taxon_names Vector taxonomic names. taxon_names_full Vector joined taxonomic name author.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_from_taxon_name_full.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate author from combined taxonomic name and author — author_from_taxon_name_full","text":"Vector author/s taxonomic names.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_from_taxon_name_full.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Separate author from combined taxonomic name and author — author_from_taxon_name_full","text":"taxon_names taxon_names_full must number elements ith element correspond name. obtain author ith record word/s found taxon_names[] removed  taxon_names_full[].","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_from_taxon_name_full.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate author from combined taxonomic name and author — author_from_taxon_name_full","text":"","code":"taxon_names = c('Achatocarpus praecox', 'Anthurium affine') taxon_names_full = c('Achatocarpus praecox Griseb.', 'Anthurium affine Schott') author_from_taxon_name_full(taxon_names, taxon_names_full) #> [1] \"Griseb.\" \"Schott\""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_words.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract words from author — author_words","title":"Extract words from author — author_words","text":"Extract words author","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_words.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract words from author — author_words","text":"","code":"author_words(author)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_words.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract words from author — author_words","text":"author Author wants splitting words.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_words.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract words from author — author_words","text":"Words contained author.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_words.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract words from author — author_words","text":"string author extract words begin capital followed least two lower case letters hyphens. special cases DC., Sm. Br.. special cases \\\\ added . allow regular expression searching authors grepl(\"DC\\\\.\", \"Author\"). included L. since mistaken initial another author rather Carl Linnaeus. function used comparing authors author_check().","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/author_words.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract words from author — author_words","text":"","code":"author_words('(Jacq.) Schott') #> [1] \"Jacq\"   \"Schott\" author_words('Villarroel & J.R.I.Wood') #> [1] \"Villarroel\" \"Wood\"       author_words('(DC.) F.Muell.') #> [1] \"Muell\" \"DC\\\\.\""},{"path":"https://jakepowellcubg.github.io/BGR/reference/convert_to_accepted_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to accepted plant name for World Checklist of Vascular Plants — convert_to_accepted_name","title":"Convert to accepted plant name for World Checklist of Vascular Plants — convert_to_accepted_name","text":"Convert accepted plant name World Checklist Vascular Plants","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/convert_to_accepted_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to accepted plant name for World Checklist of Vascular Plants — convert_to_accepted_name","text":"","code":"convert_to_accepted_name(original_match, wcvp)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/convert_to_accepted_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to accepted plant name for World Checklist of Vascular Plants — convert_to_accepted_name","text":"original_match indices rows wcvp$wcvp_names (generally referred enrich_database) corresponding matches collection . wcvp World Checklist Vascular Plants (WCVP) database, obtained using function import_wcvp_names().","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/convert_to_accepted_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to accepted plant name for World Checklist of Vascular Plants — convert_to_accepted_name","text":"match message converting accepted name","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_basic_stats_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_basic_stats_interactive() — create_basic_stats_interactive","title":"create_basic_stats_interactive() — create_basic_stats_interactive","text":"create_basic_stats_interactive()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_basic_stats_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_basic_stats_interactive() — create_basic_stats_interactive","text":"","code":"create_basic_stats_interactive(   enriched_report,   min_year = NULL,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_basic_stats_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_basic_stats_interactive() — create_basic_stats_interactive","text":"enriched_report enriched report min_year first year consider retrospective review. collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_basic_stats_static.html","id":null,"dir":"Reference","previous_headings":"","what":"create_basic_stats_static() — create_basic_stats_static","title":"create_basic_stats_static() — create_basic_stats_static","text":"create_basic_stats_static()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_basic_stats_static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_basic_stats_static() — create_basic_stats_static","text":"","code":"create_basic_stats_static(   enriched_report,   min_year = NULL,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_basic_stats_static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_basic_stats_static() — create_basic_stats_static","text":"enriched_report enriched report min_year first year consider retrospective review. collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_duplication_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_duplication_interactive() — create_duplication_interactive","title":"create_duplication_interactive() — create_duplication_interactive","text":"create_duplication_interactive()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_duplication_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_duplication_interactive() — create_duplication_interactive","text":"","code":"create_duplication_interactive(   enriched_report,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_duplication_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_duplication_interactive() — create_duplication_interactive","text":"enriched_report enriched report collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_key_taxa_compare_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_key_taxa_interactive() — create_key_taxa_compare_interactive","title":"create_key_taxa_interactive() — create_key_taxa_compare_interactive","text":"create_key_taxa_interactive()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_key_taxa_compare_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_key_taxa_interactive() — create_key_taxa_compare_interactive","text":"","code":"create_key_taxa_compare_interactive(   enriched_report,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_key_taxa_compare_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_key_taxa_interactive() — create_key_taxa_compare_interactive","text":"enriched_report enriched report collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_key_taxa_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_key_taxa_interactive() — create_key_taxa_interactive","title":"create_key_taxa_interactive() — create_key_taxa_interactive","text":"create_key_taxa_interactive()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_key_taxa_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_key_taxa_interactive() — create_key_taxa_interactive","text":"","code":"create_key_taxa_interactive(   enriched_report,   min_year = NULL,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_key_taxa_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_key_taxa_interactive() — create_key_taxa_interactive","text":"enriched_report enriched report min_year first year consider retrospective review. collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_last_update_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_last_update_interactive() — create_last_update_interactive","title":"create_last_update_interactive() — create_last_update_interactive","text":"create_last_update_interactive()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_last_update_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_last_update_interactive() — create_last_update_interactive","text":"","code":"create_last_update_interactive(   enriched_report,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_last_update_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_last_update_interactive() — create_last_update_interactive","text":"enriched_report enriched report collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_last_update_static.html","id":null,"dir":"Reference","previous_headings":"","what":"create_last_update_static() — create_last_update_static","title":"create_last_update_static() — create_last_update_static","text":"create_last_update_static()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_last_update_static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_last_update_static() — create_last_update_static","text":"","code":"create_last_update_static(   enriched_report,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_last_update_static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_last_update_static() — create_last_update_static","text":"enriched_report enriched report collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_retrospective_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_retrospective_interactive() — create_retrospective_interactive","title":"create_retrospective_interactive() — create_retrospective_interactive","text":"function can used create snapshot report living collection. report produces interactive graphs (bars, pies geography) distribution plants collection. includes native location plants collection proportion endemic threatened species collection.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_retrospective_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_retrospective_interactive() — create_retrospective_interactive","text":"","code":"create_retrospective_interactive(   enriched_report,   collection = NULL,   min_year = NULL,   collection_coords = NA,   save_widgets = FALSE,   create_excel = FALSE,   output_dir = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_retrospective_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_retrospective_interactive() — create_retrospective_interactive","text":"enriched_report enriched report collection name collection min_year earliest year want review collection_coords coordinates collection (long, lat) save_widgets Logical whether want create folder 'Widgets' containing widgets report. create_excel Logical whether want create excel file containing tables used create widgets report. output_dir Path output directory.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_snapshot_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_snapshot_interactive() — create_snapshot_interactive","title":"create_snapshot_interactive() — create_snapshot_interactive","text":"function can used create snapshot report living collection. report produces interactive graphs (bars, pies geography) distribution plants collection. includes native location plants collection proportion endemic threatened species collection.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_snapshot_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_snapshot_interactive() — create_snapshot_interactive","text":"","code":"create_snapshot_interactive(   enriched_report,   collection = NULL,   collection_coords = NA,   output_file = NULL,   save_widgets = FALSE,   create_excel = FALSE,   output_dir = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_snapshot_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_snapshot_interactive() — create_snapshot_interactive","text":"enriched_report enriched report collection name collection collection_coords coordinates collection (long, lat) output_file file path output save_widgets Logical whether want create folder 'Widgets' containing widgets report. create_excel Logical whether want create excel file containing tables used create widgets report. output_dir Path output directory.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_turnover_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"create_turnover_interactive() — create_turnover_interactive","title":"create_turnover_interactive() — create_turnover_interactive","text":"create_turnover_interactive()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_turnover_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_turnover_interactive() — create_turnover_interactive","text":"","code":"create_turnover_interactive(   enriched_report,   min_year = NULL,   collection = NULL,   output_file = NULL )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/create_turnover_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_turnover_interactive() — create_turnover_interactive","text":"enriched_report enriched report min_year first year consider retrospective review. collection name collection output_file file path output","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/enrich_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Enrich a collection's database — enrich_collection","title":"Enrich a collection's database — enrich_collection","text":"function enriches plant records collection using information POWO (WCVP), IUCN redlist BGCI.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/enrich_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enrich a collection's database — enrich_collection","text":"","code":"enrich_collection(   collection,   wcvp = NA,   iucnRedlist = NA,   BGCI = NA,   taxon_name_column = \"TaxonName\",   taxon_name_full_column = NA,   taxon_author_column = NA,   do_is_autonym = FALSE,   do_status_year = FALSE,   do_taxon_types = FALSE,   ...,   wcvp_wanted_info = c(\"plant_name_id\", \"taxon_name\", \"taxon_authors\", \"taxon_rank\",     \"taxon_status\", \"powo_id\", \"family\", \"genus\", \"species\", \"lifeform_description\",     \"climate_description\", \"geographic_area\", \"Dist_000_area_code_l3\", \"Dist_000_labels\",     \"Dist_100_area_code_l3\", \"Dist_010_area_code_l3\", \"Dist_001_area_code_l3\",     \"Dist_101_area_code_l3\", \"Dist_110_area_code_l3\", \"Dist_011_area_code_l3\",     \"main_common_name\", \"assessment_date\", \"category\", \"criteria\", \"population_trend\"),   redlist_wanted_info = c(\"plant_name_id\", \"main_common_name\", \"assessment_date\",     \"category\", \"criteria\", \"population_trend\") )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/enrich_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enrich a collection's database — enrich_collection","text":"collection data frame containing collection. wcvp World Checklist Vascular Plants (WCVP) database, obtained using function import_wcvp_names(). NA WCVP enrichment performed. iucnRedlist IUCN Red List Threatened Species database, obtained using function XXXX.  NA IUCN red list enrichment performed. BGCI Requires cleaned BGCI plant search database obtain many collections globally taxon contained (freely available). NA BGCI plant search enrichment performed. taxon_name_column name column collection corresponding taxonomic names. taxon_name_full_column name column collection corresponding joined taxonomic names authors. taxon_author_column name column collection corresponding authors taxonomic names. do_is_autonym Flag (TRUE/FALSE) whether add column is_autonym, see add_is_autonym() details. do_status_year Flag (TRUE/FALSE) whether add column status_year, see add_status_year() details. do_taxon_types Flag (TRUE/FALSE) whether add column taxon_type, see add_taxon_type() details. ... Arguments (.e., attributes) used matching algorithm (passed along match_collection_to_wcvp()). Examples include typo_method, do_convert_accepted try_fix_hybrid. wcvp_wanted_info character vector containing information want extract WCVP. matched column names wcvp$wcvp_names, wcvp$geography wcvp$redlist (later two exist). redlist_wanted_info character vector containing information want extract IUCN red list, corresponding column names iucnRedlist.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/enrich_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enrich a collection's database — enrich_collection","text":"collection data frame enriched information dependent function inputs (new columns).","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/enrich_collection_from_enrich_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Enrich a collection using enrichment database — enrich_collection_from_enrich_database","title":"Enrich a collection using enrichment database — enrich_collection_from_enrich_database","text":"Enrich collection using enrichment database","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/enrich_collection_from_enrich_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enrich a collection using enrichment database — enrich_collection_from_enrich_database","text":"","code":"enrich_collection_from_enrich_database(   collection,   enrich_database,   ...,   columns_to_enrich = NA,   add_to_column_name = \"Enrich_\",   add_match_details = TRUE )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/enrich_collection_from_enrich_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enrich a collection using enrichment database — enrich_collection_from_enrich_database","text":"collection data frame containing collection. enrich_database data frame enriching information. ... Arguments (.e., attributes) used matching algorithm (passed along nested functions). See match_collection_to_enrich_database(). columns_to_enrich Column names enrich_database enriched collection. add_to_column_name string prepend new columns collection created enrichment. add_match_details flag (TRUE/FALSE) whether match details also want added enriched collection.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/enrich_collection_from_enrich_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enrich a collection using enrichment database — enrich_collection_from_enrich_database","text":"collection enriched new columns matching enrich_database","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/enrich_collection_from_enrich_database.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enrich a collection using enrichment database — enrich_collection_from_enrich_database","text":"function takes collection \"enriches\" adding new information taken enrich_database matching via taxonomic names. matching performed match_collection_to_enrich_database(), inputs can passed function via .... enrichment columns add can specified columns_to_enrich, can include th matching details via add_match_details. make sure enrichment column names clash names already collection prepended add_to_column_name.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/exist_at_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data frame of records that exist each year — exist_at_date","title":"Generate data frame of records that exist each year — exist_at_date","text":"function calculates items collection existing given date (dates).","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/exist_at_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data frame of records that exist each year — exist_at_date","text":"","code":"exist_at_date(date, AccessionYear, ItemStatusDate, ItemStatusType)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/exist_at_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data frame of records that exist each year — exist_at_date","text":"date dates format YYYY-MM-DD YYYY/MM/DD. AccessionYear accession year records. ItemStatusDate data records last updated. ItemStatusType status record last updated. Either Existing NotExisting.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/exist_at_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data frame of records that exist each year — exist_at_date","text":"data frame column corresponds date, row item collection. (,j)th value logical (TRUE/FALSE) corresponding whether ith item existed jth date.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/exist_at_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate data frame of records that exist each year — exist_at_date","text":"Accession date inputted AccessionYear accepts year, example c(2014,2017,2015). accession date set 1st January given year. Item death calculated via inputs ItemStatusDate ItemStatusType. item still alive (ItemStatusType == 'Existing) death date set today (Sys.Date()). Otherwise item dead (ItemStatusType == 'NotExisting) use corresponding date given ItemStatusDate. year available ItemStatusDate set date death 31st December year. month year available set day item death 28th. AccessionYear, ItemStatusDate ItemStatusType inputs must length ith value corresponds ith item collection.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/exist_at_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate data frame of records that exist each year — exist_at_date","text":"","code":"exist_at_date(date = c('2003-06-25', '2010-03-07'), AccessionYear = c('1956', '1988', '2005', '2018'), ItemStatusDate = c('2004-01', '2010-03-05', '2022-04-08', '2022-08-19'), ItemStatusType = c('NotExisting','NotExisting','Existing','Existing')) #>   2003-06-25 2010-03-07 #> 1       TRUE      FALSE #> 2       TRUE      FALSE #> 3      FALSE       TRUE #> 4      FALSE      FALSE"},{"path":"https://jakepowellcubg.github.io/BGR/reference/extract_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the year from different date formats — extract_year","title":"Extract the year from different date formats — extract_year","text":"function extracts year dates date can formats : DD/MM/YYYY, YYYY-MM-DD, MM/YYYY, YYYY-MM, YYYY, DD Month YYYY.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/extract_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the year from different date formats — extract_year","text":"","code":"extract_year(dates)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/extract_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the year from different date formats — extract_year","text":"dates vector dates.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/extract_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the year from different date formats — extract_year","text":"vector corresponding years.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/extract_year.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the year from different date formats — extract_year","text":"method works extracting patterns 4 numbers row. Thus, year must format YYYY. .e. formats DD/MM/YY.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/extract_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the year from different date formats — extract_year","text":"","code":"extract_year(c('03/05/2021', '3rd of May 2022', '2023-05-03')) #> [1] 2021 2022 2023"},{"path":"https://jakepowellcubg.github.io/BGR/reference/generate_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"generate_labels() — generate_labels","title":"generate_labels() — generate_labels","text":"Generate shortened distribution details can used labels collections.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/generate_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate_labels() — generate_labels","text":"","code":"generate_labels(data)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/generate_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate_labels() — generate_labels","text":"data distribution data plants taken wcvp_distribution.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/generate_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate_labels() — generate_labels","text":"labels","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_accepted_plant.html","id":null,"dir":"Reference","previous_headings":"","what":"Get accepted plant details from POWO online — get_accepted_plant","title":"Get accepted plant details from POWO online — get_accepted_plant","text":"function queries POWO online accepted name plant corresponding Plants World Online identifier.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_accepted_plant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get accepted plant details from POWO online — get_accepted_plant","text":"","code":"get_accepted_plant(powo_id)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_accepted_plant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get accepted plant details from POWO online — get_accepted_plant","text":"powo_id Plants World Online identifier","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_accepted_plant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get accepted plant details from POWO online — get_accepted_plant","text":"vector length two containing accepted name accepted powo_id.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_accepted_plant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get accepted plant details from POWO online — get_accepted_plant","text":"connection POWO work (exist) function returns (NA, NA).","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/get_accepted_plant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get accepted plant details from POWO online — get_accepted_plant","text":"","code":"get_accepted_plant('582307-1') #> [1] \"Campomanesia thea\" \"44106-2\""},{"path":"https://jakepowellcubg.github.io/BGR/reference/import_wcvp_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Information from wcvp_names — import_wcvp_names","title":"Information from wcvp_names — import_wcvp_names","text":"allow three methods uploading information wcvp_names: choosing file path csv file containing information using filepath. loading R save (file type .RData, .rdata, .rda .rds) via filepath. using package  rWCVPData, setting use_rWCVPData = TRUE.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/import_wcvp_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information from wcvp_names — import_wcvp_names","text":"","code":"import_wcvp_names(   filepath = NULL,   use_rWCVPdata = FALSE,   wanted_columns = c(\"plant_name_id\", \"taxon_rank\", \"taxon_status\", \"family\", \"genus\",     \"species\", \"lifeform_description\", \"climate_description\", \"taxon_name\",     \"taxon_authors\", \"accepted_plant_name_id\", \"powo_id\") )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/import_wcvp_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information from wcvp_names — import_wcvp_names","text":"filepath path wcvp_names.csv file. use_rWCVPdata Flag whether use rWCVPdata get wcvp_names wanted_columns specify extra columns extract wcvp_names.csv.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/import_wcvp_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information from wcvp_names — import_wcvp_names","text":"Data frame ddesired information wcvp_names","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/import_wcvp_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Information from wcvp_names — import_wcvp_names","text":"columns extracted always include:\"plant_name_id\", \"taxon_name\", \"taxon_authors\", \"taxon_rank\", \"accepted_plant_name_id\" \"powo_id\". columns can extracted using wanted_columns parameter, either columns names indices can used. add two new columns: 'taxon_length' contains number characters given taxon_name used searching typos garden databases. 'is_autonym' contains logical flag whether taxon name autonym. used match autonyms garden databases. Moreover, code performs fixes data provided namely: Checks '*' '**' taxon_name taxon_rank, 'var.' 'f.' instead. potentially plants synonyms without accepted form wcvp_names. However, cases accepted form can found POWO online. Therefore, case scrap POWO online accepted form add loaded information wcvp_names. author provided autonyms, extract corresponding author matching GenusSpecies record.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/is_autonym.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a taxonomic name is an autonym — is_autonym","title":"Find if a taxonomic name is an autonym — is_autonym","text":"function find  taxonomic name autonym.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/is_autonym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a taxonomic name is an autonym — is_autonym","text":"","code":"is_autonym(taxon_name)  add_is_autonym(   collection,   taxon_name_column = \"TaxonName\",   progress_bar = FALSE )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/is_autonym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a taxonomic name is an autonym — is_autonym","text":"taxon_name taxonomic name plant. collection data frame containing collection. taxon_name_column name column containing (original) Taxon name. progress_bar Logical flag, TRUE show progress bar.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/is_autonym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a taxonomic name is an autonym — is_autonym","text":"TRUE taxonomic name autonym, otherwise FALSE.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/is_autonym.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find if a taxonomic name is an autonym — is_autonym","text":"obtain whether taxonomic names autonyms compare words either side 'splitter'. splitters defined subsp., var., f., ssp. nothosubsp.. words either side identical return TRUE otherwise return FALSE.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/is_autonym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find if a taxonomic name is an autonym — is_autonym","text":"","code":"is_autonym(\"Codiaeum variegatum var. variegatum\") #> [1] TRUE is_autonym(\"Crinum pedunculatum f. purple\") #> [1] FALSE  taxon_names = c(\"Saintpaulia diplotricha\", \"Codiaeum variegatum var. variegatum\") collection = data.frame(ID = 1:2, name = taxon_names) add_is_autonym(collection, taxon_name_column = 'name') #>   ID                                name is_autonym #> 1  1             Saintpaulia diplotricha      FALSE #> 2  2 Codiaeum variegatum var. variegatum       TRUE"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_authors.html","id":null,"dir":"Reference","previous_headings":"","what":"Find best author matches — match_authors","title":"Find best author matches — match_authors","text":"Find best author matches","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_authors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find best author matches — match_authors","text":"","code":"match_authors(   collection_author,   enriched_database_authors,   partial_method = \"most words\",   ... )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_authors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find best author matches — match_authors","text":"collection_author author collection wanted matched enriched_database_authors Author options enrich_database. partial_method Either 'words 'words', defining method used find partial matches. ... Arguments (.e., attributes) used matching algorithm (passed along nested fuctions).","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_authors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find best author matches — match_authors","text":"list length 2 : $wanted logical (TRUE/FALSE) vector length length(enriched_database_authors) corresponding enriched database authors match collection author. $message detailing whether author match exact, partial match found.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_authors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find best author matches — match_authors","text":"","code":"collection_author = 'Schult' enriched_database_authors = c(\"(Lour.) Schult\", \"Borhidi & E.Martinez\") match_authors(collection_author, enriched_database_authors) #> $wanted #> [1]  TRUE FALSE #>  #> $message #> [1] \"(Partial author <most words>)\" #>"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_enrich_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Match collection to an enrichment database via taxonomic names — match_collection_to_enrich_database","title":"Match collection to an enrichment database via taxonomic names — match_collection_to_enrich_database","text":"Match collection enrichment database via taxonomic names","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_enrich_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match collection to an enrichment database via taxonomic names — match_collection_to_enrich_database","text":"","code":"match_collection_to_enrich_database(   collection,   enrich_database,   taxon_name_column = NA,   taxon_name_full_column = NA,   taxon_author_column = NA,   enrich_taxon_name_column = NA,   enrich_taxon_authors_column = NA,   typo_method = \"All\",   do_add_split = TRUE,   do_fix_hybrid = TRUE,   do_rm_autonym = TRUE,   do_rm_cultivar_indeterminates = TRUE,   do_match_single = TRUE,   do_match_multiple = TRUE,   do_fix_taxon_name = TRUE,   matching_criterion = BGSmartR::no_additional_matching,   ... )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_enrich_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match collection to an enrichment database via taxonomic names — match_collection_to_enrich_database","text":"collection data frame containing collection. enrich_database data frame enriching information. taxon_name_column name column collection corresponding taxonomic names. taxon_name_full_column name column collection corresponding joined taxonomic names authors. taxon_author_column name column collection corresponding authors taxonomic names. enrich_taxon_name_column name column enrich_database corresponds taxonomic names. enrich_taxon_authors_column name column enrich_database corresponds authors taxonomic names. typo_method Either '', 'Data frame ','Data frame + common', ; detailing level typo finding required. do_add_split Flag (TRUE/FALSE) whether search missing f./var./subsp. do_fix_hybrid Flag (TRUE/FALSE) whether search hybrid issues. do_rm_autonym Flag (TRUE/FALSE) whether try removing autonyms. do_rm_cultivar_indeterminates Flag (TRUE/FALSE) whether remove cultivars indeterminates prior taxonomic name matching. do_match_single Flag (TRUE/FALSE) whether matching unique taxonomic names enrich_database. do_match_multiple Flag (TRUE/FALSE) whether matching non-unique taxonomic names enrich_database. do_fix_taxon_name Flag (TRUE/FALSE) whether attempt fix common issues taxonomic names aid matching. Sections common issue fixes can also turned /using inputs do_add_split, do_fix_hybrid, do_rm_autonym. matching_criterion function used chose best method extracts enrich_database. ... Arguments (.e., attributes) used matching algorithm (passed along nested fuctions). Examples include, enrich_display_in_message_column enrich_plant_identifier_column.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_enrich_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match collection to an enrichment database via taxonomic names — match_collection_to_enrich_database","text":"list length seven containing: $match index record enrich_database matches record collection database. $details_short simplified message detailing match. $match_taxon_name longer format message detailing match. $original_authors author/s (extracted) collection database. $match_authors author/s matched record enrich_database. $author_check Either Identical, Partial Different  (Match match enrich_database found). message informing similarity collection's taxon authors authors found enrich_database. Author similarity found using function  author_check().","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_enrich_database.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match collection to an enrichment database via taxonomic names — match_collection_to_enrich_database","text":"function allows matching collection's database enrichment database. default function uses steps matching algorithm, details see vignette Matching.Rmd (Method Matching taxonomic records). parts algorithm required can switched using  typo_method, do_add_split, do_fix_hybrid, do_rm_autonym, do_rm_cultivar_indeterminates, do_match_single, do_match_multiple do_fix_taxon_name. Moreover, default custom matching performed. user inputted custom matching criterion (function) can added via input matching_criterion. perform matching must specify columns name taxon name enrichment database (enrich_taxon_name_column). author matching required column must also specified enrichment database (enrich_taxon_authors_column). enrichment database must columns required matching (single_entry, taxon_length, etc), advice using prepare_enrich_database() add columns. Similarly, must specify columns name taxon name collection database (taxon_name_column). author matching desired two choices: specify taxon author column taxon_author_column. Specify combined taxon name author column, taxon_name_full_column removes words found taxon names taxon names full extract authors. Note specified authors taxon_author_column used.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_iucnRedlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Match collection to IUCN Red List of Threatened Species via taxonomic name — match_collection_to_iucnRedlist","title":"Match collection to IUCN Red List of Threatened Species via taxonomic name — match_collection_to_iucnRedlist","text":"Match collection IUCN Red List Threatened Species via taxonomic name","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_iucnRedlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match collection to IUCN Red List of Threatened Species via taxonomic name — match_collection_to_iucnRedlist","text":"","code":"match_collection_to_iucnRedlist(   collection,   iucnRedlist,   taxon_name_column = \"TaxonName\",   taxon_name_full_column = NA,   taxon_author_column = NA,   typo_method = \"All\",   do_add_split = TRUE,   do_fix_hybrid = TRUE,   do_rm_autonym = TRUE,   ...,   enrich_taxon_name_column = \"scientific_name\",   enrich_display_in_message_column = \"taxonid\",   enrich_plant_identifier_column = \"taxonid\",   matching_criterion = BGSmartR::no_additional_matching,   try_hybrid = FALSE )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_iucnRedlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match collection to IUCN Red List of Threatened Species via taxonomic name — match_collection_to_iucnRedlist","text":"collection data frame containing collection. iucnRedlist IUCN Red List Threatened Species database, obtained using function XXXX. taxon_name_column name column collection corresponding taxonomic names. taxon_name_full_column name column collection corresponding joined taxonomic names authors. taxon_author_column name column collection corresponding authors taxonomic names. typo_method Either '', 'Data frame ','Data frame + common', detailing level typo finding required. do_add_split Flag (TRUE/FALSE) whether search missing f./var./subsp. do_fix_hybrid Flag (TRUE/FALSE) whether search hybrid issues. do_rm_autonym Flag (TRUE/FALSE) whether try removing autonyms. ... Arguments (.e., attributes) used matching algorithm (passed along nested functions). Examples include enrich_taxon_authors_column, enrich_display_in_message_column enrich_plant_identifier_column. enrich_taxon_name_column name column iucnRedlist corresponding taxonomic names.Default value scientific_name. enrich_display_in_message_column name column iucnRedlist contains values show matching messages. Default value taxonid. enrich_plant_identifier_column name column iucnRedlist corresponds record identifier. Default value taxonid. matching_criterion function used chose best method extracts iucnRedlist. try_hybrid Flag (TRUE/FALSE) whether want look hybrid fixes across fixing methods.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_iucnRedlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match collection to IUCN Red List of Threatened Species via taxonomic name — match_collection_to_iucnRedlist","text":"list length seven containing: $match index record iucnRedlist matches record collection database. $details_short simplified message detailing match. $match_taxon_name longer format message detailing match. $original_authors author/s (extracted) collection database. $match_authors author/s matched record iucnRedlist. $author_check Either Identical, Partial Different  (Match match iucnRedlist found). message informing similarity collection's taxon authors authors found iucnRedlist. Author similarity found using function  author_check(). match = taxon_match_full,","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_iucnRedlist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match collection to IUCN Red List of Threatened Species via taxonomic name — match_collection_to_iucnRedlist","text":"function allows matching collection's database IUCN Red List Threatened Species database. function relies matching functions found documented  match_single(), broadly similar function match_collection_to_wcvp(). Note default matching functions use column names (WCVP) therefore often require changing prior matching unless change column names iucnRedlist concure wcvp column names. Within algorithm exists methods improve matching trying change infraspecific levels (e.g var. subsp.) adding hybridisation. methods can turned using do_add_split, do_fix_hybrid, do_rm_autonym typo_method.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_wcvp.html","id":null,"dir":"Reference","previous_headings":"","what":"Match collection to World Checklist of Vascular Plants via taxonomic name — match_collection_to_wcvp","title":"Match collection to World Checklist of Vascular Plants via taxonomic name — match_collection_to_wcvp","text":"Match collection World Checklist Vascular Plants via taxonomic name","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_wcvp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match collection to World Checklist of Vascular Plants via taxonomic name — match_collection_to_wcvp","text":"","code":"match_collection_to_wcvp(   collection,   wcvp,   taxon_name_column = \"TaxonName\",   taxon_name_full_column = NA,   taxon_author_column = NA,   enrich_taxon_authors_column = \"taxon_authors_simp\",   typo_method = \"All\",   do_add_split = TRUE,   do_fix_hybrid = TRUE,   do_rm_autonym = TRUE,   do_convert_accepted = TRUE,   matching_criterion = BGSmartR::additional_wcvp_matching,   ...,   enrich_taxon_name_column = \"taxon_name\",   enrich_display_in_message_column = \"powo_id\",   enrich_plant_identifier_column = \"plant_name_id\" )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_wcvp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match collection to World Checklist of Vascular Plants via taxonomic name — match_collection_to_wcvp","text":"collection data frame containing collection. wcvp World Checklist Vascular Plants (WCVP) database, obtained using function import_wcvp_names(). taxon_name_column name column collection corresponding taxonomic names. taxon_name_full_column name column collection corresponding joined taxonomic names authors. taxon_author_column name column collection corresponding authors taxonomic names. enrich_taxon_authors_column name column enrich_database corresponds authors taxonomic names. Default value taxon_authors_simp. typo_method Either '', 'Data frame ','Data frame + common', detailing level typo finding required. do_add_split Flag (TRUE/FALSE) whether search missing f./var./subsp. do_fix_hybrid Flag (TRUE/FALSE) whether search hybrid issues. do_rm_autonym Flag (TRUE/FALSE) whether try removing autonyms. do_convert_accepted Flag whether convert accepted names wcvp matching_criterion function used chose best method extracts wcvp$wcvp_names. ... Arguments (.e., attributes) used matching algorithm (passed along nested fuctions). Examples include, enrich_display_in_message_column enrich_plant_identifier_column. enrich_taxon_name_column name column iucnRedlist corresponding taxonomic names.Default value scientific_name. enrich_display_in_message_column name column iucnRedlist contains values show matching messages. Default value taxonid. enrich_plant_identifier_column name column iucnRedlist corresponds record identifier. Default value taxonid.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_wcvp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match collection to World Checklist of Vascular Plants via taxonomic name — match_collection_to_wcvp","text":"list length seven containing: $match index record wcvp$wcvp_names matches record collection database. $details_short simplified message detailing match. $match_taxon_name longer format message detailing match. $original_authors author/s (extracted) collection database. $match_authors author/s matched record wcvp$wcvp_names. $author_check Either Identical, Partial Different  (Match match wcvp found). message informing similarity collection's taxon authors authors found wcvp$wcvp_names. Author similarity found using function  author_check().","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_collection_to_wcvp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match collection to World Checklist of Vascular Plants via taxonomic name — match_collection_to_wcvp","text":"function allows matching collection's database World Checklist Vascular Plants (WCVP) database. details matching algorithm works see Method Matching taxonomic records vignette (Matching.Rmd).","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_original_to_BGCI.html","id":null,"dir":"Reference","previous_headings":"","what":"match_original_to_BGCI() — match_original_to_BGCI","title":"match_original_to_BGCI() — match_original_to_BGCI","text":"match_original_to_BGCI()","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_original_to_BGCI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"match_original_to_BGCI() — match_original_to_BGCI","text":"","code":"match_original_to_BGCI(original_report, BGCI, taxon_name_col = \"TaxonName\")"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_original_to_BGCI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"match_original_to_BGCI() — match_original_to_BGCI","text":"original_report original_report BGCI BGCI taxon_name_col taxon_name_col","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_original_to_BGCI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"match_original_to_BGCI() — match_original_to_BGCI","text":"gardens","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Matching functions — match_single","title":"Matching functions — match_single","text":"Functions used match taxonomic names collection exterior databases (POWO's WCVP, IUCN Redlist)","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matching functions — match_single","text":"","code":"match_single(   taxon_names,   enrich_database,   enrich_database_search_index,   enrich_taxon_name_column = \"taxon_name\",   enrich_display_in_message_column = \"ID\",   match_column = NA,   ... )  match_multiple(   taxon_names,   taxon_authors,   enrich_database,   enrich_database_search_index,   enrich_taxon_name_column = \"taxon_name\",   enrich_display_in_message_column = \"ID\",   enrich_plant_identifier_column = \"ID\",   match_column = NA,   ...,   show_progress = TRUE )  match_all_issue(   taxon_names,   taxon_authors = rep(NA, length(taxon_names)),   enrich_database,   matching_authors = BGSmartR::match_authors,   matching_criterion = BGSmartR::additional_wcvp_matching,   do_add_split = TRUE,   do_fix_hybrid = TRUE,   do_rm_autonym = TRUE,   enrich_taxon_name_column = \"taxon_name\",   enrich_taxon_authors_column = \"taxon_authors_simp\",   enrich_plant_identifier_column = \"ID\",   enrich_display_in_message_column = \"ID\",   ... )  match_typos(   taxon_names,   taxon_authors,   enrich_database,   enrich_taxon_name_column = \"taxon_name\",   single_indices = NA,   mult_indices = NA,   typo_method = \"Data frame only\",   ... )  no_match_cultivar_indet(taxon_names)  get_match_from_multiple(   taxon_name_and_author,   enrich_database_mult,   matching_authors = BGSmartR::match_authors,   matching_criterion = BGSmartR::no_additional_matching,   enrich_plant_identifier_column = \"plant_name_id\",   enrich_taxon_name_column = \"taxon_name\",   enrich_taxon_authors_column = \"taxon_authors_simp\",   enrich_taxon_author_words_column = \"author_parts\",   ... )  check_taxon_typo(   taxon_name,   enrich_database = NA,   enrich_taxon_name_column = \"taxon_name\",   typo_df = BGSmartR::typo_list,   typo_method = \"Data frame only\",   ... )  shorten_message(messages)  try_rm_autonym(   taxon_names,   enrich_database_taxon_names,   console_message = TRUE,   ... )  try_fix_infraspecific_level(   taxon_names,   enrich_database_taxon_names,   try_hybrid = TRUE,   console_message = TRUE,   ... )  try_fix_hybrid(   taxon_names,   enrich_database_taxon_names,   try_hybrid = TRUE,   console_message = TRUE,   ... )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matching functions — match_single","text":"taxon_names Vector taxonomic names. enrich_database data frame enriching information want match taxon_names . enrich_database_search_index vector indices enrich_database desired matched . enrich_taxon_name_column name column enrich_database corresponds taxonomic names. Default value taxon_names. enrich_display_in_message_column name column enrich_database contains values show matching messages. Default value powo_id (wcvp identifier). match_column either NA name column enrich_database. default value NA means values match indices matched records enrich database. instead single column enrich_database desired result match name column needs provided. ... Arguments (.e., attributes) used matching algorithm (passed along nested fuctions). Examples include enrich_taxon_authors_column, enrich_display_in_message_column enrich_plant_identifier_column. taxon_authors vector full taxon names (corresponding taxon_names) enrich_plant_identifier_column name column enrich_database corresponds record identifier. Default value plant_name_id. show_progress Flag (TRUE/FALSE) whether show progress bar. matching_authors function used find best match using author taxonomic names. default function BGSmartR::match_authors() used. matching_criterion function used find best match 'non-unique' taxonomic names. default function BGSmartR::get_match_from_multiple() used. do_add_split Flag (TRUE/FALSE) whether search missing f./var./subsp. do_fix_hybrid Flag (TRUE/FALSE) whether search hybrid issues. do_rm_autonym Flag (TRUE/FALSE) whether try removing autonyms. enrich_taxon_authors_column name column enrich_database corresponds authors taxonomic names. Default value taxon_authors_simp. single_indices vector indices enrich_database correspond records 'unique' taxonomic names. mult_indices vector indices enrich_database correspond records 'non-unique' taxonomic names. typo_method Either '', 'Data frame ','Data frame + common', detailing level typo finding required. taxon_name_and_author pair taxonomic name combined taxonomic name author enrich_database_mult enrich_database restricted rows correspond 'non-unique' taxonomic names. enrich_taxon_author_words_column name column enrich_database corresponds words contained authors taxonomic names. Default value author_parts. taxon_name single taxonomic name. typo_df data frame first column taxonomic name typo second column corrected taxonomic name. default BGSmartR::typo_list used. messages messages detailing match obtained. enrich_database_taxon_names taxon names taken enrich_database. console_message Flag (TRUE/FALSE) detailing whether show messages console. try_hybrid Flag (TRUE/FALSE) whether hybrid fixes attempted.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/match_single.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Matching functions — match_single","text":"outline uses function. details examples matching functions please see Matching.Rmd vignette. matching functions generally return index matching record enrich_database message detailing match obtained. function can used building blocks build custom taxonomic name matching algorithm. match_single() matches taxon_names enrich_database taking first match. enrich_database_search_index used restrict enrich database 'unique' taxonomic names (.e taxonomic names correspond single record enrich database). 'non-unique' taxonomic names match_multiple() used. match_multiple() matches taxon_names enrich_database entries enrich database non-unique taxonomic names. 'unique' taxonomic names match_single() used. non-unique taxonomic names first use taxonomic author matching decide record use. matching performed taxonomic name author using function get_match_from_multiple(). get_match_from_multiple() depends  matching criteria function can added using input matching_criterion (passed via ...). default set additional_wcvp_matching(), uses accepted_plant_name_id taxon_status chose best match (WCVP). match_all_issue() attempts fix hybridisation, change infraspecific levels remove autonyms find matches enriched database. function depends functions: try_rm_autonym() attempts find taxonomic names enrich_database removing autonyms. try_fix_infraspecific_level() attempts find taxonomic names enrich_database adding/changing/removing infraspecific levels (var., f., etc). try_fix_hybrid()  attempts find taxonomic names enrich_database adding/changing/removing hybrid markers (+ x). match_typos() attempts find matches searching typos taxonomic name. depends function: check_taxon_typo() check single taxonomic name typos found either typo list enriched database. no_match_cultivar_indet() searches cultivars indeterminates sets match -1 indicating match. shorten_message() compresses matching message (details match found) easy read format.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/no_additional_matching.html","id":null,"dir":"Reference","previous_headings":"","what":"Matching criterions — no_additional_matching","title":"Matching criterions — no_additional_matching","text":"Custom matching criterions used within match_all_issue() get_match_from_multiple().","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/no_additional_matching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matching criterions — no_additional_matching","text":"","code":"no_additional_matching(enrich_database_extract, message = \"\")  additional_wcvp_matching(enrich_database_extract, message = \"\")"},{"path":"https://jakepowellcubg.github.io/BGR/reference/no_additional_matching.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matching criterions — no_additional_matching","text":"enrich_database_extract extract enrichment database (often records identical taxonomic names). message Matching message.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/no_additional_matching.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matching criterions — no_additional_matching","text":"Always returns list 2 : $row rows enrich_database_extract corresponding best match/s according criterion. $message combination input message method used determine match.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/no_additional_matching.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Matching criterions — no_additional_matching","text":"Within BGSmartR two -built custom matching criterions. no_additional_matching() used custom matching wants performed. additional_wcvp_matching() default additional matching World Checklist Vascular Plants (WCVP) database. method includes looking ahead see potential matches lead accepted plant name, matching taxon_status records (Accepted Synonym). can used within match_all_issue() get_match_from_multiple() via input matching_criterion. See vignette Method Matching taxonomic records details custom matching create new matching criterions.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/prepare_enrich_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare enrichment database for matching — prepare_enrich_database","title":"Prepare enrichment database for matching — prepare_enrich_database","text":"Prepare enrichment database matching","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/prepare_enrich_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare enrichment database for matching — prepare_enrich_database","text":"","code":"prepare_enrich_database(   enrich_database,   enrich_taxon_name_column = \"taxon_names\",   enrich_taxon_authors_column = NA,   enrich_taxon_name_full_column = NA,   do_sanitise = TRUE,   do_taxon_length = TRUE,   do_single_entry = TRUE,   do_author_parts = TRUE,   do_add_id = TRUE,   do_sort = TRUE,   console_message = FALSE )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/prepare_enrich_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare enrichment database for matching — prepare_enrich_database","text":"enrich_database data frame enriching information. enrich_taxon_name_column name column enrich_database corresponds taxonomic names. Default value taxon_names. enrich_taxon_authors_column name column enrich_database corresponds authors taxonomic names. enrich_taxon_name_full_column name column enrich_database corresponding joined taxonomic names authors. do_sanitise Flag (TRUE/FALSE) detailing whether add columns sanitise_name, sanitise_author  require_sanitise corresponding sanitised taxonomic name, sanitised author flag (TRUE/FALSE) whether taxonomic name needed sanitising. do_taxon_length Flag (TRUE/FALSE) detailing whether add column taxon_length containing string length taxonomic names. do_single_entry Flag (TRUE/FALSE) detailing whether add column single_entry containing whether taxonomic name appears multiple times enrich_database. do_author_parts Flag (TRUE/FALSE) detailing whether add column author_parts containing words extracted taxonomic author. used partial author matching. do_add_id Flag (TRUE/FALSE) detailing whether add column ID containing unique identifer record enrich_database. do_sort Flag (TRUE/FALSE) detailing whether  alphabetically sort taxonomic names  enrich database. console_message Flag (TRUE/FALSE) detailing whether show messages console.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/prepare_enrich_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare enrichment database for matching — prepare_enrich_database","text":"enrich_database additional columns used matching taxonomic names.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/prepare_enrich_database.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare enrichment database for matching — prepare_enrich_database","text":"function adds columns enrichment database used matching taxonomic names. default includes: sanitise_name sanitised taxonomic name. sanitise_author sanitised author taxonomic name. require_sanitise logical column (TRUE/FALSE) whether taxonomic name required sanitising. = author_parts Words found taxonomic author (removing initials punctuation) used performing partial author matching. taxon_length length taxonomic name (string length) used typo searching performed matching algorithm. single_entry logical column (TRUE/FALSE) whether taxonomic name unique enrich_database, used restrict records performing either single matching multiple matching. ID column unique identifiers record enrich_database. Used referencing matches. Moreover function sorts enrich database alphabetical order taxonomic names. additional column can switched /using inputs  do_sanitise, do_taxon_length, do_single_entry, do_author_parts do_sort. Note sanitising performed sorting single_entry performed sanitised taxonoic names inputted names (enrich_database[[enrich_taxon_name_column]]). Similarly, sanitised authors used creating author parts.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/prepare_enrich_database.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare enrichment database for matching — prepare_enrich_database","text":"","code":"taxon_names = c('Abies taxifolia', 'ABIES taxifolia',  'Acalypha gracilens', 'Eupatorium magdalenae', 'Adina racemosa') taxon_authors = c('Duhamel', 'Poir.', 'A.Gray', 'Stehlé', '(Siebold & Zucc.) Miq.')  enrich_database = data.frame(taxon_names,taxon_authors, value = runif(5)) prepare_enrich_database(enrich_database, enrich_taxon_name_column = 'taxon_names', enrich_taxon_authors_column = 'taxon_authors') #>   ID           taxon_names          taxon_authors     value #> 1  1       Abies taxifolia                Duhamel 0.1385334 #> 2  2       ABIES taxifolia                  Poir. 0.1528162 #> 3  3    Acalypha gracilens                 A.Gray 0.6531556 #> 5  4        Adina racemosa (Siebold & Zucc.) Miq. 0.7573475 #> 4  5 Eupatorium magdalenae                 Stehlé 0.5630059 #>           sanitise_name        sanitise_author require_sanitise taxon_length #> 1       Abies taxifolia                Duhamel            FALSE           15 #> 2       Abies taxifolia                  Poir.             TRUE           15 #> 3    Acalypha gracilens                 A.Gray            FALSE           18 #> 5        Adina racemosa (Siebold & Zucc.) Miq.            FALSE           14 #> 4 Eupatorium magdalenae                 Stehle            FALSE           21 #>   single_entry       author_parts #> 1        FALSE            Duhamel #> 2        FALSE               Poir #> 3         TRUE               Gray #> 5         TRUE Siebold, Zucc, Miq #> 4         TRUE             Stehle"},{"path":"https://jakepowellcubg.github.io/BGR/reference/sanitise_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Sanitising functions — sanitise_name","title":"Sanitising functions — sanitise_name","text":"Functions clean standardise taxonomic names authors.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/sanitise_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sanitising functions — sanitise_name","text":"","code":"sanitise_name(taxon_name)  sanitise_authors(taxon_authors)  sanitise_names_authors(taxon_names, taxon_authors = NA, taxon_names_full = NA)  sanitise_names_authors_report(   collection,   taxon_name_column = \"TaxonName\",   taxon_name_full_column = NA,   taxon_author_column = NA )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/sanitise_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sanitising functions — sanitise_name","text":"taxon_name taxonomic name plant. taxon_authors Vector taxonomic authors. taxon_names Vector taxonomic names. taxon_names_full Vector joined taxonomic name author. collection data frame collection. taxon_name_column name column collection corresponding taxonomic names. taxon_name_full_column name column collection corresponding joined taxonomic names authors. taxon_author_column name column collection corresponding authors taxonomic names.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/sanitise_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sanitising functions — sanitise_name","text":"sanitise_name() returns sanitised name single taxonomic name. sanitise_authors() returns sanitised name  taxonomic authors. characters coerced Latin-ASCII, thereby removing diacritics (e.g umlauts). clean_names_authors() sanitises multiple taxonomic names without corresponding authors, applying sanitise_name() sanitise_authors(). input vector taxonomic names required (taxon_names), addition vector authors (taxon_authors) joined taxonomic name authors (taxon_names_full) can provided. neither taxon_authors taxon_names_full provided author names set ''. list returned : $taxon_name vector sanitised taxonomic names, $authora vector sanitised authors, $sanitised logical vector whether taxon_name sanitised. clean_names_authors_report() applies clean_names_authors() collection inputs : data frame collection (collection), column name taxonomic names (taxon_name_column, required), column name authors taxonomic names  (taxon_author_column, optional), column name combined taxonomic name author  (taxon_name_full_column, optional).","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/sanitise_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sanitising functions — sanitise_name","text":"","code":"sanitise_name('TRIGONELLA afghanica') #> [1] \"Trigonella afghanica\" sanitise_name('Halimium X pauanum') #> [1] \"Halimium × pauanum\" sanitise_name('Aruncus dioicus var acuminatus') #> [1] \"Aruncus dioicus var. acuminatus\" sanitise_authors('Stehlé') #> [1] \"Stehle\"  taxon_names = c('TRIGONELLA afghanica', 'Halimium X pauanum',  'Aruncus dioicus var acuminatus', 'Eupatorium magdalenae') taxon_authors = c('Vassilcz', 'Font Quer', '(Douglas ex Hook.) H.Hara', 'Stehlé')  sanitise_names_authors(taxon_names, taxon_authors) #> $taxon_name #> [1] \"Trigonella afghanica\"            \"Halimium * pauanum\"              #> [3] \"Aruncus dioicus var. acuminatus\" \"Eupatorium magdalenae\"           #>  #> $author #> [1] \"Vassilcz\"                  \"Font Quer\"                 #> [3] \"(Douglas ex Hook.) H.Hara\" \"Stehle\"                    #>  #> $sanitised #> [1]  TRUE  TRUE  TRUE FALSE #>   collection = data.frame(names = taxon_names, full = paste0(taxon_names, ' ', taxon_authors)) sanitise_names_authors_report(collection, taxon_name_column = 'names',  taxon_name_full_column = 'full') #> $taxon_name #> [1] \"Trigonella afghanica\"            \"Halimium * pauanum\"              #> [3] \"Aruncus dioicus var. acuminatus\" \"Eupatorium magdalenae\"           #>  #> $author #> [1] \"Vassilcz\"                  \"Font Quer\"                 #> [3] \"(Douglas ex Hook.) H.Hara\" \"Stehle\"                    #>  #> $sanitised #> [1]  TRUE  TRUE  TRUE FALSE #>"},{"path":"https://jakepowellcubg.github.io/BGR/reference/taxon_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the taxon type (biological/horticultural characteristics) — taxon_type","title":"Extract the taxon type (biological/horticultural characteristics) — taxon_type","text":"functions extract taxon type taxon name, particular whether item :  indeterminate, species, subspecies, variety, forma, cultivar hybrid.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/taxon_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the taxon type (biological/horticultural characteristics) — taxon_type","text":"","code":"taxon_type(taxon_name)  add_taxon_type(   collection,   taxon_name_column = \"TaxonName\",   POWO_taxon_name_column = NA,   progress_bar = FALSE )"},{"path":"https://jakepowellcubg.github.io/BGR/reference/taxon_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the taxon type (biological/horticultural characteristics) — taxon_type","text":"taxon_name taxonomic name plant. collection data frame containing collection. taxon_name_column name column containing (original) taxon name. POWO_taxon_name_column name column containing POWO (WCVP) Taxon name. progress_bar Logical flag, TRUE show progress bar.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/taxon_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the taxon type (biological/horticultural characteristics) — taxon_type","text":"aim functions extract biological horticultural characteristics items via taxonomic name. taxonomic name functions return string containing taxon types . : \"0.indet\": item indeterminate. \"1.species\": item species. \"2.subsp\": item subspecies. \"3.var\": item variety. \"4.f\": item forma. \"5.cultivar\": item cultivar. \"6.hybrid\": item hybrid. 0-4 biological characteristics item can one characteristics. 5-6 horticultural characteristics item can none, one . taxon_type() returns taxon type given single taxonomic name. add_taxon_type() adjoins column called taxon_type original collection containing taxon type item. .na(POWO_taxon_name_column) == TRUE taxon type extracted purely taxon names contained column taxon_name_column. POWO_taxon_name_column name column collection taxon type extracted column corresponding , missing values entries corresponding taxon_name_column used instead.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/taxon_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the taxon type (biological/horticultural characteristics) — taxon_type","text":"","code":"taxon_type(\"Aridaria sp.\") #> [1] \"0.indet\" taxon_type(\"Saxegothaea conspicua\") #> [1] \"1.species\" taxon_type(\"Rhododendron charitopes subsp. tsangpoense\") #> [1] \"2.subsp\" taxon_type(\"Aquilegia flabellata f. alba 'green'\") #> [1] \"4.f, 5.cultivar\"  taxon_names = c(\"Saintpaulia diplotricha\", \"Aridaria sp.\") POWO_taxon_name = c(\"Streptocarpus ionanthus var. diplotrichus\", NA) collection = data.frame(name = taxon_names, POWO = POWO_taxon_name) add_taxon_type(collection, taxon_name_column = 'name', POWO_taxon_name_column = 'POWO') #>                      name                                      POWO taxon_type #> 1 Saintpaulia diplotricha Streptocarpus ionanthus var. diplotrichus      3.var #> 2            Aridaria sp.                                      <NA>    0.indet"},{"path":"https://jakepowellcubg.github.io/BGR/reference/typo_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon name typos — typo_list","title":"Taxon name typos — typo_list","text":"data frame common typos found taxon name fixes.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/typo_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon name typos — typo_list","text":"","code":"typo_list"},{"path":[]},{"path":"https://jakepowellcubg.github.io/BGR/reference/typo_list.html","id":"typo-list","dir":"Reference","previous_headings":"","what":"typo_list","title":"Taxon name typos — typo_list","text":"data frame 8,253 rows 2 columns: Original Original Taxon name typo Fixed Fixed Taxon name","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/value_of_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Create value of items in a collection — value_of_items","title":"Create value of items in a collection — value_of_items","text":"Create value items collection","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/value_of_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create value of items in a collection — value_of_items","text":"","code":"value_of_items(collection, dependents = NA)"},{"path":"https://jakepowellcubg.github.io/BGR/reference/value_of_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create value of items in a collection — value_of_items","text":"collection data frame containing collection. dependents list scoring systems, scoring system list : $column column collection generating score . $weight weight score (multiplier), relative columns. $details data frame detailing score particular values found column. values match column found names score contained value. $type method matching/finding entries column. Allowable values 'Exact', 'Grepl', 'Number range'  'Number range (int)'.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/value_of_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create value of items in a collection — value_of_items","text":"list length two containing: $total_value vector length nrow(collection) containing value item collection. $value_breakdown data frame nrow(collection) rows length(dependents) columns giving value dependent corresponding columns.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/value_of_items.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create value of items in a collection — value_of_items","text":"function generates value item collection given users scoring system. scoring system provided via input dependents. Please see vignette Adding value items collection documentation.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level1_simp.html","id":null,"dir":"Reference","previous_headings":"","what":"wgsrpd3_level1_simp — wgsrpd3_level1_simp","title":"wgsrpd3_level1_simp — wgsrpd3_level1_simp","text":"data frame containing BRU level 1 areas simplified geometries using rmapshaper::ms_simplify.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level1_simp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wgsrpd3_level1_simp — wgsrpd3_level1_simp","text":"","code":"wgsrpd3_level1_simp"},{"path":[]},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level1_simp.html","id":"wgsrpd-level-simp","dir":"Reference","previous_headings":"","what":"wgsrpd3_level1_simp","title":"wgsrpd3_level1_simp — wgsrpd3_level1_simp","text":"data frame 9 rows 3 columns: code code area name name area geometry geometry area","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level2_simp.html","id":null,"dir":"Reference","previous_headings":"","what":"wgsrpd3_level2_simp — wgsrpd3_level2_simp","title":"wgsrpd3_level2_simp — wgsrpd3_level2_simp","text":"data frame containing BRU level 2 areas simplified geometries using rmapshaper::ms_simplify.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level2_simp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wgsrpd3_level2_simp — wgsrpd3_level2_simp","text":"","code":"wgsrpd3_level2_simp"},{"path":[]},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level2_simp.html","id":"wgsrpd-level-simp","dir":"Reference","previous_headings":"","what":"wgsrpd3_level2_simp","title":"wgsrpd3_level2_simp — wgsrpd3_level2_simp","text":"data frame 52 rows 3 columns: code code area name name area geometry geometry area","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level3_simp.html","id":null,"dir":"Reference","previous_headings":"","what":"wgsrpd3_level3_simp — wgsrpd3_level3_simp","title":"wgsrpd3_level3_simp — wgsrpd3_level3_simp","text":"data frame containing BRU level 3 areas simplified geometries using rmapshaper::ms_simplify.","code":""},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level3_simp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wgsrpd3_level3_simp — wgsrpd3_level3_simp","text":"","code":"wgsrpd3_level3_simp"},{"path":[]},{"path":"https://jakepowellcubg.github.io/BGR/reference/wgsrpd3_level3_simp.html","id":"wgsrpd-level-simp","dir":"Reference","previous_headings":"","what":"wgsrpd3_level3_simp","title":"wgsrpd3_level3_simp — wgsrpd3_level3_simp","text":"data frame 369 rows 3 columns: code code area name name area geometry geometry area","code":""}]
